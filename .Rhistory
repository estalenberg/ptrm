labels <- paste(labels,"\n",dF2$name.lab)
#draw main  map----
# par(fig = c(0,1,0,1))
inputData <- getMap(resolution="coarse")
mapCountryData(inputData,mapRegion="Australia", oceanCol="azure",mapTitle = " ",addLegend = F,colourPalette = c("white","white","white","white","white","white","white"))
m=mapCountryData(inputData,mapRegion="Australia", oceanCol="azure",mapTitle = " ",addLegend = F,colourPalette = c("white","white","white","white","white","white","white"))
m
plot(m)
#draw main  map----
# par(fig = c(0,1,0,1))
inputData <- getMap(resolution="coarse")
par(mai=c(1,1,1,0))
box(lty = "solid", col="grey")
CP <- as(extent(128.2339, 153.5141 , -44.03992, -10.08297), "SpatialPolygons")
plot(CP)
#draw main  map----
# par(fig = c(0,1,0,1))
inputData <- getMap(resolution="coarse")
par(mai=c(1,1,1,0))
mapCountryData(inputData,mapRegion="Australia", oceanCol="azure",mapTitle = " ",addLegend = F,colourPalette = c("white","white","white","white","white","white","white"))
#draw extent to crop
select.area=drawExtent() # click twice to
select.area
CP <- as(extent(112, 156 , -44.76, -10), "SpatialPolygons")
aus.crop <- crop(inputData, CP)
aus.crop <- gIntersection(inputData, CP, byid=TRUE)
proj4string(CP)
projection(inputData)
projection(CP)=projection(inputData)
projection(CP)
plot(CP)
plot(inputData, add=T)
aus.crop <- gIntersection(inputData, CP, byid=TRUE)
aus.crop <- crop(inputData, CP)
proj4string(CP)
proj4string(inputData)
proj4string(inputData) <- proj4string(CP)
proj4string(inputData)
proj4string(CP)
aus.crop <- crop(inputData, CP)
aus.crop <- mask(inputData, CP)
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-100,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(96)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
scolours$colour=as.character(scolours$colour)
percent=seq(0,100,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(heat.colors(9))
colour = colorRampPalette(colour)(101)
labels=paste("+",as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours2 <- cbind.data.frame(percent,scalefac,colour, labels)
scolours2$colour=as.character(scolours2$colour)
scol=rbind.data.frame(scolours, scolours2)
scol=scol[order(scol$percent),]
#pie(rep(1, length(scol$colour)), col = scol$colour , main="")
#for legend
subdf=seq(-100,100,by=20)
df.new <- scol[scol$percent %in% subdf, ]
# UI  ----
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
par(mar=c(0,2,0,0))#sets margins of plotting area
#layout.show(n=4)
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
plot(model.plot, col = scol$colour[match(model.plot@data$price, scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
plot(model.plot, col = scol$colour[match(model.plot@data$price, scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
text(model.plot, labels = as.character(model.plot@data$labels),cex=1.5)
# layout(matrix(c(1, 1, 1,
#                1, 1, 1,
#               2, 3, 4), nrow=3, byrow=TRUE))
plot.new()
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
par(mar=c(0,2,0,0))#sets margins of plotting area
#layout.show(n=4)
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
scol$colour
scol
model.plot@data$price
round(model.plot@data$price,1)
(round(model.plot@data$price,digits=0)
)
plot(model.plot, col = scol$colour[match((round(model.plot@data$price,digits=0)), scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
plot(stateshp)
stateshp=readRDS("./data/states.rds")
plot(stateshp)
aus<-raster("data/austif.tif")
aus<-raster("data/austif.tif")
plot(aus)
plot(aus, col="blue")
plot.new()
plot(aus, col="blue")
layout(matrix(1:1,ncol=1), width = c(1,1),height = c(1,1))
plot(aus, col = terrain.colors(3))
plot(aus, col = "YlGnBu")
plot(aus, col = YlGnBu(5))
cm.colors(3)
plot(aus, col = c("white", "lightblue"))
plot(aus, col = c("grey","white", "lightblue", "deepskyblue"))
plot(aus, col = c("grey","white", "lightblue", "white","deepskyblue"))
plot(aus, col = c("grey","white", "lightblue", "white","white","white"))
plot(aus, col = c("grey","white", "lightblue", "white","white"))
setwd("C:/R/PTRM/mapping")
#read shapefile
washp<-readOGR(dsn = "c:/R/PTRM/mapping",layer =  "washp")
plot(washp)
#read shapefile
washp<-readOGR(dsn = "c:/R/PTRM/mapping",layer =  "washp_simp")
plot(washp)
saveRDS(washp,"C:/R/shiny/dabase_app/data/washp.rds")
saveRDS(washp,"C:/R/PTRM/mapping/washp.rds")
washp=readRDS("./data/washp.rds")
# import data ----
setwd("C:/R/shiny/dabase_app")
washp=readRDS("./data/washp.rds")
# import data ----
#setwd("C:/R/shiny/dabase_app")
alldnsp=readRDS("./data/alldnsp.rds")
labels.df=read.csv("./data/labels.csv")
par(bg = 'light blue')
map("worldHires", "Australia", fill=TRUE,col="grey", xlim=c(125,165),
ylim=c(-45,-15))
#libraries ----
library(shiny)
#library(maptools)
#library(maps)
#library(mapdata)
#library(lattice)
library(sp)  # classes for spatial data
#library(rgeos)
library(dismo) #need this to load map
#library(gtools)
#library(GISTools)
library(rgdal) #loading polygon shapefile
library(RColorBrewer) #for map colours
library(shinyjs)
library(shinythemes)
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
par(mar=c(0,2,0,0))#sets margins of plotting area
#to float in the ocean
par(bg = 'light blue')
map("worldHires", "Australia", fill=TRUE,col="grey", xlim=c(125,165),
ylim=c(-45,-15))
#need to add=T into the next line
??map
# layout(matrix(c(1, 1, 1,
#                1, 1, 1,
#               2, 3, 4), nrow=3, byrow=TRUE))
plot.new()
layout(matrix(1:1,ncol=1), width = c(1,1),height = c(1,1))
plot(model.plot, col = scol$colour[match((round(model.plot@data$price,digits=0)), scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
plot(washp, add=T)
plot(washp, add=T, col="white")
plot(model.plot, add=T, col="white")
#plot ----
# layout(matrix(c(1, 1, 1,
#                1, 1, 1,
#               2, 3, 4), nrow=3, byrow=TRUE))
plot.new()
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
# layout(matrix(1:1,ncol=1), width = c(1,1),height = c(1,1))
par(mar=c(0,2,0,0))#sets margins of plotting area
#to float in the ocean
par(bg = 'light blue')
#map("worldHires", "Australia", fill=TRUE,col="grey", xlim=c(125,165),
#        ylim=c(-45,-15))
#need to add=T into the next line
layout(matrix(1:2,nrow=2), width = c(1,1),height = c(2,1))
#layout.show(n=4)
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
plot(model.plot, col = scol$colour[match((round(model.plot@data$price,digits=0)), scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
plot(washp, add=T, col="white")
plot(model.plot, add=T, col="white")
#text(model.plot, labels = as.character(model.plot@data$labels),cex=1.5)
par(mar=c(25,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 1,11, angle=0)
#text(y=-0.5, x = seq(0,11,l=11), labels = df.new$labels)
#plot.new()
# legend(x = "bottom", horiz=T, nrow=2,title="% Change \n in price",text.font=0.8,xpd=T,
#       legend = rev((df.new$labels)),
#      col = rev(df.new$colour), pch = 19, bty = 'n',xjust = -1,cex=1.4)
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-100,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(96)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
scolours$colour=as.character(scolours$colour)
percent=seq(0,100,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(heat.colors(9))
colour = colorRampPalette(colour)(101)
labels=paste("+",as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours2 <- cbind.data.frame(percent,scalefac,colour, labels)
scolours2$colour=as.character(scolours2$colour)
scol=rbind.data.frame(scolours, scolours2)
scol=scol[order(scol$percent),]
#pie(rep(1, length(scol$colour)), col = scol$colour , main="")
#for legend
subdf=seq(-100,100,by=20)
df.new <- scol[scol$percent %in% subdf, ]
#df.new = scol[seq(1, nrow(scol), 10), ]
# code states with new percents
#ui <- fluidPage(
# theme = shinytheme("paper"),
#tags$head(HTML("<title>Baller Lab</title>")), #Without company logo
#tags$head(HTML("<title>Baller Lab</title> <link rel='icon' type='image/gif/png' href='ballerlablogo.png'>")), #WIth company logo
#navbarPage(title = div(img(src="ballerlablogo.png", style="margin-top: -14px;", height = 50))))
plot.new()
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
# layout(matrix(1:1,ncol=1), width = c(1,1),height = c(1,1))
par(mar=c(0,2,0,0))#sets margins of plotting area
#to float in the ocean
par(bg = 'light blue')
#map("worldHires", "Australia", fill=TRUE,col="grey", xlim=c(125,165),
#        ylim=c(-45,-15))
#need to add=T into the next line
layout(matrix(1:2,nrow=2), width = c(1,1),height = c(2,1))
#layout.show(n=4)
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
plot(model.plot, col="grey")
plot(washp, add=T, col="grey")
plot(model.plot, add=T,
col = scol$colour[match((round(model.plot@data$price,digits=0)), scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
#text(model.plot, labels = as.character(model.plot@data$labels),cex=1.5)
par(mar=c(25,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 1,11, angle=0)
#text(y=-0.5, x = seq(0,11,l=11), labels = df.new$labels)
#plot.new()
plot.new()
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
layout(matrix(1:1,ncol=1), width = c(1,1),height = c(1,1))
# layout(matrix(c(1, 1, 1,
#                1, 1, 1,
#               2, 3, 4), nrow=3, byrow=TRUE))
plot.new()
# layout(matrix(c(1, 1, 1,
#                1, 1, 1,
#               2, 3, 4), nrow=3, byrow=TRUE))
plot.new()
par(mar=c(0,2,0,0))#sets margins of plotting area
plot.new()
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
#to float in the ocean
par(bg = 'light blue')
#layout.show(n=4)
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
plot(model.plot, col="grey")
plot(washp, add=T, col="grey")
plot(model.plot, add=T,
col = scol$colour[match((round(model.plot@data$price,digits=0)), scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
par(mar=c(25,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
df.new$labels
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 1,11, angle=0)
runApp()
percent=seq(-200,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(96)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
scolours$colour=as.character(scolours$colour)
percent=seq(0,200,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(heat.colors(9))
colour = colorRampPalette(colour)(101)
labels=paste("+",as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours2 <- cbind.data.frame(percent,scalefac,colour, labels)
scolours2$colour=as.character(scolours2$colour)
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(196)
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=5)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=2)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(98)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(196)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
scolours$colour=as.character(scolours$colour)
percent=seq(0,200,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(heat.colors(9))
colour = colorRampPalette(colour)(201)
labels=paste("+",as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours2 <- cbind.data.frame(percent,scalefac,colour, labels)
scolours2$colour=as.character(scolours2$colour)
scol=rbind.data.frame(scolours, scolours2)
scol=scol[order(scol$percent),]
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
pie(rep(1, length(scol$colour)), col = scol$colour , main="")
#for legend
subdf=seq(-200,200,by=20)
df.new <- scol[scol$percent %in% subdf, ]
runApp()
runApp()
runApp()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 1,11, angle=0)
rasterImage(legend_image, 0.5, 0, 1,11, angle=90)
rasterImage(legend_image, 3, 0, 1,11, angle=90)
plot.new()
rasterImage(legend_image, 3, 0, 1,11, angle=90)
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 3, 0, 1,11, angle=90)
rasterImage(legend_image, 0.5, 0, 11,11, angle=90)
rasterImage(legend_image, 0.5, 0, 11,1, angle=90)
rasterImage(legend_image, 0.5, 0, 11,50, angle=90)
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 11,50, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 11,30, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 10, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 2, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 15,10, angle=90)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
scenario.in="best"
#run ptrm function with zubi's output
likely=c(60,10,10,0,2,75)
apoc=c(50,0,25,-1,2,50)
best=c(70,20,0,1,1,100)
scenarios=cbind.data.frame(likely,apoc,best)
scenario_num=ifelse(scenario.in=="likely",1,ifelse(scenario.in=="best",3,2))
projyearend.in = 60
age.in=scenarios[1,as.numeric(scenario_num)]
retireslim.in=scenarios[2,as.numeric(scenario_num)] #%
addnew.in=scenarios[3,as.numeric(scenario_num)] #%
productivity.in=scenarios[4,as.numeric(scenario_num)] #%
dynamicincdebt.in=scenarios[5,as.numeric(scenario_num)] #%
cars.in=scenarios[6,as.numeric(scenario_num)]#%
method=2 #1=warl, 2=yearonyear
dnsp.in=as.character("SAPN") #(1: ausgrid, 2: sa)
setwd("C:/R/shiny/dabase_app")
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in)
rev_pcust=subset(price.df,price.df$names=="rev_pcust")
rev_pGWh=subset(price.df,price.df$names=="rev_pGWh")
pchange2160_pcust=((rev_pcust[40]-rev_pcust[1])/rev_pcust[1])*100
#mapping variable:
pchange2160_pGWh=((rev_pGWh[40]-rev_pGWh[1])/rev_pGWh[1])*100
price_ures=as.vector(t(subset(price.df,price.df$names=="res_ckwh")))
price_ures=as.numeric(price_ures[1:length(price_ures)-1])
price_ures
yearlabel=as.vector(colnames(price.df))
yearlabel=as.numeric(yearlabel[1:length(yearlabel)-1])
yearlabel=yearlabel+2000
d1=cbind.data.frame(yearlabel,price_ures)
names(d1)=c("yearlabel","price")
d1$fullname="Residential (non TOU)"
d1$type="Residential"
d1$tou="non TOU"
# d2=cbind.data.frame(yearlabel,price_ubus)
#  names(d2)=c("yearlabel","price")
# d2$fullname="Small business (non TOU)"
#  d2$type="Small business"
#  d2$tou="non TOU"
#  d3=cbind.data.frame(yearlabel,price_urestou)
#  names(d3)=c("yearlabel","price")
#  d3$fullname="Residential (TOU)"
#  d3$type="Residential"
#  d3$tou="TOU"
#  d4=cbind.data.frame(yearlabel,price_ubustou)
#  names(d4)=c("yearlabel","price")
#  d4$fullname="Small business (TOU)"
#  d4$type="Small business"
#  d4$tou="TOU"
# udata=rbind.data.frame(d1,d2,d3,d4)
udata=d1
udata=udata[1:(length(yearlabel)*4)-1,]
udata$fullname=as.factor(udata$fullname)
udata$type=as.factor(udata$type)
udata$tou=as.factor(udata$tou)
c=ggplot(udata,aes(x=yearlabel,y=price,group=fullname)) +
geom_line(size=1,aes(linetype = tou, color = type))+
theme_classic(base_size=12)+
theme(axis.text.x=element_text(size=12),legend.text=element_text(size=12),
axis.text.y=element_text(size=12))+
#theme(legend.title =element_blank())+
#theme(legend.position="bottom")+
theme(legend.position="none")+
guides(linetype=guide_legend(nrow=2,byrow=TRUE),col=guide_legend(nrow=2,byrow=TRUE))+
ggtitle("Residential (non TOU) \n price per energy unit (c/kWh, real terms)")+
ylab("Price c/kWh ($m)")+xlab("Year")+ scale_y_continuous(expand = c(0, 0),lim=c(0,50))+
scale_color_manual(values=c("#fc8d59","#02818a"))+
geom_text(x=2058, y=max(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),
label=round(max(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),digits=1),size=5)+
geom_text(x=2024, y=min(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),
label=round(min(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),digits=1),size=5)
c
runApp()
runApp()
runApp()
