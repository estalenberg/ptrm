plot.new()
par(mar=c(0,2,0,0))#sets margins of plotting area
plot.new()
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
#to float in the ocean
par(bg = 'light blue')
#layout.show(n=4)
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
plot(model.plot, col="grey")
plot(washp, add=T, col="grey")
plot(model.plot, add=T,
col = scol$colour[match((round(model.plot@data$price,digits=0)), scol$percent)]) #,xlim=c(140,150), ylim=c(-50,-10))
par(mar=c(25,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
df.new$labels
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 1,11, angle=0)
runApp()
percent=seq(-200,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(96)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
scolours$colour=as.character(scolours$colour)
percent=seq(0,200,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(heat.colors(9))
colour = colorRampPalette(colour)(101)
labels=paste("+",as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours2 <- cbind.data.frame(percent,scalefac,colour, labels)
scolours2$colour=as.character(scolours2$colour)
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(196)
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=5)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=2)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(98)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
#colours#
#colours ----
#manually colour scheme for both plots
#spectral can only take 11 categories, ylorred takes 9
percent=seq(-200,-5,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(brewer.pal(9, "BuGn"))
#add more tones to this palette :
colour = colorRampPalette(colour)(196)
#pie(rep(1, length(colour)), col = colour , main="")
labels=paste(as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours <- cbind.data.frame(percent,scalefac,colour,labels)
scolours$colour=as.character(scolours$colour)
percent=seq(0,200,by=1)
scalefac=as.factor(percent)
scalefac = levels(scalefac)
colour = rev(heat.colors(9))
colour = colorRampPalette(colour)(201)
labels=paste("+",as.numeric(percent),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
scolours2 <- cbind.data.frame(percent,scalefac,colour, labels)
scolours2$colour=as.character(scolours2$colour)
scol=rbind.data.frame(scolours, scolours2)
scol=scol[order(scol$percent),]
legend_image <- as.raster(matrix(rev(df.new$colour), ncol=1))
pie(rep(1, length(scol$colour)), col = scol$colour , main="")
#for legend
subdf=seq(-200,200,by=20)
df.new <- scol[scol$percent %in% subdf, ]
runApp()
runApp()
runApp()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 1,11, angle=0)
rasterImage(legend_image, 0.5, 0, 1,11, angle=90)
rasterImage(legend_image, 3, 0, 1,11, angle=90)
plot.new()
rasterImage(legend_image, 3, 0, 1,11, angle=90)
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 3, 0, 1,11, angle=90)
rasterImage(legend_image, 0.5, 0, 11,11, angle=90)
rasterImage(legend_image, 0.5, 0, 11,1, angle=90)
rasterImage(legend_image, 0.5, 0, 11,50, angle=90)
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 0, 11,50, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 11,30, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 10, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 2, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 11,10, angle=90)
plot.new()
par(mar=c(15,0,10,4))#sets margins of plotting area
plot(c(0,2),c(0,11),type = 'n', axes = F,xlab = '', ylab = '', main = '\n % Change \n in price')
text(x=1.5, y = seq(0,11,l=11), labels = df.new$labels)
rasterImage(legend_image, 0.5, 1, 15,10, angle=90)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
scenario.in="best"
#run ptrm function with zubi's output
likely=c(60,10,10,0,2,75)
apoc=c(50,0,25,-1,2,50)
best=c(70,20,0,1,1,100)
scenarios=cbind.data.frame(likely,apoc,best)
scenario_num=ifelse(scenario.in=="likely",1,ifelse(scenario.in=="best",3,2))
projyearend.in = 60
age.in=scenarios[1,as.numeric(scenario_num)]
retireslim.in=scenarios[2,as.numeric(scenario_num)] #%
addnew.in=scenarios[3,as.numeric(scenario_num)] #%
productivity.in=scenarios[4,as.numeric(scenario_num)] #%
dynamicincdebt.in=scenarios[5,as.numeric(scenario_num)] #%
cars.in=scenarios[6,as.numeric(scenario_num)]#%
method=2 #1=warl, 2=yearonyear
dnsp.in=as.character("SAPN") #(1: ausgrid, 2: sa)
setwd("C:/R/shiny/dabase_app")
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in)
rev_pcust=subset(price.df,price.df$names=="rev_pcust")
rev_pGWh=subset(price.df,price.df$names=="rev_pGWh")
pchange2160_pcust=((rev_pcust[40]-rev_pcust[1])/rev_pcust[1])*100
#mapping variable:
pchange2160_pGWh=((rev_pGWh[40]-rev_pGWh[1])/rev_pGWh[1])*100
price_ures=as.vector(t(subset(price.df,price.df$names=="res_ckwh")))
price_ures=as.numeric(price_ures[1:length(price_ures)-1])
price_ures
yearlabel=as.vector(colnames(price.df))
yearlabel=as.numeric(yearlabel[1:length(yearlabel)-1])
yearlabel=yearlabel+2000
d1=cbind.data.frame(yearlabel,price_ures)
names(d1)=c("yearlabel","price")
d1$fullname="Residential (non TOU)"
d1$type="Residential"
d1$tou="non TOU"
# d2=cbind.data.frame(yearlabel,price_ubus)
#  names(d2)=c("yearlabel","price")
# d2$fullname="Small business (non TOU)"
#  d2$type="Small business"
#  d2$tou="non TOU"
#  d3=cbind.data.frame(yearlabel,price_urestou)
#  names(d3)=c("yearlabel","price")
#  d3$fullname="Residential (TOU)"
#  d3$type="Residential"
#  d3$tou="TOU"
#  d4=cbind.data.frame(yearlabel,price_ubustou)
#  names(d4)=c("yearlabel","price")
#  d4$fullname="Small business (TOU)"
#  d4$type="Small business"
#  d4$tou="TOU"
# udata=rbind.data.frame(d1,d2,d3,d4)
udata=d1
udata=udata[1:(length(yearlabel)*4)-1,]
udata$fullname=as.factor(udata$fullname)
udata$type=as.factor(udata$type)
udata$tou=as.factor(udata$tou)
c=ggplot(udata,aes(x=yearlabel,y=price,group=fullname)) +
geom_line(size=1,aes(linetype = tou, color = type))+
theme_classic(base_size=12)+
theme(axis.text.x=element_text(size=12),legend.text=element_text(size=12),
axis.text.y=element_text(size=12))+
#theme(legend.title =element_blank())+
#theme(legend.position="bottom")+
theme(legend.position="none")+
guides(linetype=guide_legend(nrow=2,byrow=TRUE),col=guide_legend(nrow=2,byrow=TRUE))+
ggtitle("Residential (non TOU) \n price per energy unit (c/kWh, real terms)")+
ylab("Price c/kWh ($m)")+xlab("Year")+ scale_y_continuous(expand = c(0, 0),lim=c(0,50))+
scale_color_manual(values=c("#fc8d59","#02818a"))+
geom_text(x=2058, y=max(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),
label=round(max(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),digits=1),size=5)+
geom_text(x=2024, y=min(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),
label=round(min(udata$price[udata$fullname=="Residential (non TOU)"],na.rm=T),digits=1),size=5)
c
runApp()
runApp()
runApp()
shiny::runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
projyearend.in = 60
age.in=50
retireslim.in=0 #%
addnew.in=25 #%
productivity.in=-1 #%
dynamicincdebt.in=2 #%
cars.in=50#%
method=2 #1=warl, 2=yearonyear
dnsp.in=as.character("SAPN") #(1: ausgrid, 2: sa)
setwd("C:/R/shiny/dabase_app")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in)
rev_pcust=subset(price.df,price.df$names=="rev_pcust")
rev_pGWh=subset(price.df,price.df$names=="rev_pGWh")
pchange2160_pcust=((rev_pcust[40]-rev_pcust[1])/rev_pcust[1])*100
#mapping variable:
pchange2160_pGWh=((rev_pGWh[40]-rev_pGWh[1])/rev_pGWh[1])*100
df.bb=subset(df.real,df.real$type!="Revenue (real)")
df.bb=drop.terms(df.bb)
ggplot(df.bb,aes(x=year,y=cost, fill=type))+geom_bar(stat="identity")+theme_classic(base_size=15)+
theme(legend.title =element_blank())+theme(axis.text.x=element_text(size=14),axis.text.y=element_text(size=14))+
ggtitle("Annual revenue ($m, real terms)")+
scale_fill_manual(values=c("#fc8d59","#c7eae5", "#5ab4ac", "#02818a","#003c30"))+
theme(legend.position="bottom")+guides(fill=guide_legend(nrow=2,byrow=TRUE))+
ylab("Price ($m)")+xlab("Year")+ scale_x_continuous(expand = c(0.01, 0.5)) +
scale_y_continuous(expand = c(0, 0),limits = c(0,3500))+
geom_text(x=2059, y=(df.real$cost[df.real$year==2060]),
label=round(df.real$cost[df.real$year==2060],digits=1),size=6)+
geom_text(x=2022, y=(df.real$cost[df.real$year==2020]),
label=round(df.real$cost[df.real$year==2020],digits=1),size=6)
(df.bb$cost[df.real$year==2060])
bb$type
df.bb$type
df.bb$cost[df.bb$year==2060&df.bb$type=="Adjusted revenue (real)"]
df.real$type
(df.real$cost[df.bb$year==2060&df.real$type=="Revenue (real)"])
(df.real$cost[df.real$year==2060&df.real$type=="Revenue (real)"])
round((df.real$cost[df.real$year==2020&df.real$type=="Revenue (real)"]),digits=1)
runApp()
#price plots----
#b: price per customer (both small business and residential)
price_res=as.vector(t(subset(price.df,price.df$names=="resnetprice")))
price_res=as.numeric(price_res[1:length(price_res)-1])
#price_bus=as.vector(t(subset(price.df,price.df$names=="busnetprice")))
#price_bus=as.numeric(price_bus[1:length(price_bus)-1])
#    price_restou=as.vector(t(subset(price.df,price.df$names=="resnetpricetou")))
#   price_restou=as.numeric(price_restou[1:length(price_restou)-1])
#  price_bustou=as.vector(t(subset(price.df,price.df$names=="busnetpricetou")))
# price_bustou=as.numeric(price_bustou[1:length(price_bustou)-1])
yearlabel=as.vector(colnames(price.df))
yearlabel=as.numeric(yearlabel[1:length(yearlabel)-1])
yearlabel=yearlabel+2000
d1=cbind.data.frame(yearlabel,price_res)
names(d1)=c("yearlabel","price")
d1$fullname="Residential (non TOU)"
d1$type="Residential"
d1$tou="non TOU"
#  d2=cbind.data.frame(yearlabel,price_bus)
# names(d2)=c("yearlabel","price")
#  d2$fullname="Small business (non TOU)"
# d2$type="Small business"
#  d2$tou="non TOU"
# d3=cbind.data.frame(yearlabel,price_restou)
#names(d3)=c("yearlabel","price")
#d3$fullname="Residential (TOU)"
#  d3$type="Residential"
# d3$tou="TOU"
#  d4=cbind.data.frame(yearlabel,price_bustou)
#  names(d4)=c("yearlabel","price")
#  d4$fullname="Small business (TOU)"
#  d4$type="Small business"
#  d4$tou="TOU"
#data=rbind.data.frame(d1,d2,d3,d4)
data=d1
data=data[1:(length(yearlabel)*4)-1,]
data$fullname=as.factor(data$fullname)
data$type=as.factor(data$type)
data$tou=as.factor(data$tou)
data
d1
runApp()
df.real$realcapex[data$yearlabel=="2060"]
df.real$realcapex[df.real$year=="2060"]
View(df.real)
df.real$type
df.real$realcapex[df.real$year=="2060"&df.real$type=="Tax (real)"]
runApp()
df.opex=subset(df.real,df.real$type=="Opex (real)")
df.opex$year
df.opex$cost[df.opex$year=="2060"]
#Real rate of return (%)
df.wacc=cbind.data.frame(df.real$year, df.real$realratereturn)
#Real rate of return (%)
df.wacc=cbind.data.frame(df.real$year, df.real$realratereturn)
df.wacc
names(df.wacc)=c("year", "realratereturn")
df.wacc$realratereturn[df.wacc$year=="2060"]
#Real rate of return (%)
df.wacc=cbind.data.frame(df.real$year, df.real$realratereturn)
names(df.wacc)=c("year", "realratereturn")
(df.wacc$realratereturn[df.wacc$year=="2060"]
)
distinct(df.wacc)
library(dplyr)
distinct(df.wacc)
df.wacc=distinct(df.wacc)
df.wacc$realratereturn[df.wacc$year=="2060"]
df.real$realrab[df.real$year=="2060"&df.real$type=="Tax (real)"]
df.real$realrab[df.real$year=="2021"&df.real$type=="Tax (real)"]
runApp()
cust_num=(as.vector(t(subset(energyvol.df,energyvol.df$names=="custnum"))))
cust_num=as.numeric(cust_num[1:length(cust_num)-1])/1000000
energy_vol=(as.vector(t(subset(energyvol.df,energyvol.df$names=="energyvoltot"))))
energy_vol=as.numeric(energy_vol[1:length(energy_vol)-1])/1000
yearlabel=as.vector(colnames(energyvol.df))
yearlabel=as.numeric(yearlabel[1:length(yearlabel)-1])
yearlabel=yearlabel+2000
edata=cbind.data.frame(yearlabel,cust_num,energy_vol)
edata=edata[1:(length(yearlabel))-1,]
edata$cust_num[edata$yearlabel=="2060"]
edata
edata$energy_vol
runApp()
edata$cust_num[edata$yearlabel=="2059"]
runApp()
edata$energy_vol[edata$yearlabel=="2059"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='dynamicanalysis',
token='389B2ACC9D9B24E08ADDC8B856003F36',
secret='8z43PMnu4OE+q3jK2gegm8k0nvd8vbyZMq7rLkgf')
options(rsconnect.max.bundle.size=3145728000)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?scale_fill_gradient
runApp()
runApp()
projyearend.in = 60
age.in=50
retireslim.in=0 #%
addnew.in=25 #%
productivity.in=-1 #%
dynamicincdebt.in=2 #%
cars.in=50#%
method=2 #1=warl, 2=yearonyear
dnsp.in=as.character("SAPN") #(1: ausgrid, 2: sa)
setwd("C:/R/shiny/dabase_app")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in)
rev_pcust=subset(price.df,price.df$names=="rev_pcust")
rev_pGWh=subset(price.df,price.df$names=="rev_pGWh")
pchange2160_pcust=((rev_pcust[40]-rev_pcust[1])/rev_pcust[1])*100
#mapping variable:
pchange2160_pGWh=((rev_pGWh[40]-rev_pGWh[1])/rev_pGWh[1])*100
other.df[which(other.df$name=="cust growth rate"),grep("^all.years$",colnames(other.df))]
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
load_all("./",T)
document()
cust.in=1.5
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in,cust.in)
runApp('C:/R/shiny/dabase_app')
#call energy volumes with electric cars #subsets dnsp inside function
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in, cust.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in)
cust_fun(yearslabel,other.df,cust.in)
runApp('C:/R/shiny/dabase_app')
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
load_all("./",T)
document()
#check package
check()
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
deployApp('C:/R/shiny/dabase_app', account='dynamicanalysis')
#load from github
library(devtools)
install_github("estalenberg/ptrm", force = T)
library(ptrm)
library(rsconnect)
rsconnect::setAccountInfo(name='dynamicanalysis',
token='389B2ACC9D9B24E08ADDC8B856003F36',
secret='8z43PMnu4OE+q3jK2gegm8k0nvd8vbyZMq7rLkgf')
deployApp('C:/R/shiny/dabase_app', account='dynamicanalysis')
shiny::runApp('C:/R/shiny/dabase_app')
cust_fun()
?cust_fun()
install_github("estalenberg/ptrm", force = T)
library(ptrm)
?cust_fun()
library(ptrm)
install_github("estalenberg/ptrm", force = T)
library(ptrm)
library(ptrm)
?cust_fun()
rsconnect::setAccountInfo(name='dynamicanalysis',
token='389B2ACC9D9B24E08ADDC8B856003F36',
secret='8z43PMnu4OE+q3jK2gegm8k0nvd8vbyZMq7rLkgf')
shiny::runApp('C:/R/shiny/dabase_app')
rsconnect::setAccountInfo(name='dynamicanalysis',
token='389B2ACC9D9B24E08ADDC8B856003F36',
secret='8z43PMnu4OE+q3jK2gegm8k0nvd8vbyZMq7rLkgf')
deployApp('C:/R/shiny/dabase_app', account='dynamicanalysis')
y
library(rsconnect)
rsconnect::setAccountInfo(name='dynamicanalysis',
token='389B2ACC9D9B24E08ADDC8B856003F36',
secret='8z43PMnu4OE+q3jK2gegm8k0nvd8vbyZMq7rLkgf')
deployApp('C:/R/shiny/dabase_app', account='dynamicanalysis')
