resannualusetou[i]=other.df[which(other.df$name=="res cust annual energy use tou"),grep("^all.years$",colnames(other.df))]
busnetprice[i]=other.df[which(other.df$name=="small business network price nontou"),grep("^all.years$",colnames(other.df))]
busnetpricetou[i]=other.df[which(other.df$name=="small business network price tou"),grep("^all.years$",colnames(other.df))]
busannualuse[i]=other.df[which(other.df$name=="small business annual energy use nontou"),grep("^all.years$",colnames(other.df))]
busannualusetou[i]=other.df[which(other.df$name=="small business annual energy use tou"),grep("^all.years$",colnames(other.df))]
}
for (i in 2:length(tmp)){
resnetprice[i]=resnetprice[i-1]*(1+(perchange_pcust[i]/100))
resnetpricetou[i]=resnetpricetou[i-1]*(1+(perchange_pcust[i]/100))
resannualuse[i]=resannualuse[i-1]*(1+energypcustgrowthrate[i])
resannualusetou[i]=resannualusetou[i-1]*(1+energypcustgrowthrate[i])}
for (i in 2:length(tmp)){
busnetprice[i]=busnetprice[i-1]*(1+(perchange_pcust[i]/100))
busnetpricetou[i]=busnetpricetou[i-1]*(1+(perchange_pcust[i]/100))
busannualuse[i]=busannualuse[i-1]*(1+energypcustgrowthrate[i])
busannualusetou[i]=busannualusetou[i-1]*(1+energypcustgrowthrate[i])
}
res_ckwh=resnetprice/resannualuse*100
res_ckwhtou=resnetpricetou/resannualusetou*100
bus_ckwh=busnetprice/busannualuse*100
bus_ckwhtou=busnetpricetou/busannualusetou*100
data=rbind.data.frame(revenue.real,rev_pcust,rev_pGWh,perchange_pcust,perchange_pGWh,
resnetprice,resnetpricetou,busnetprice,busnetpricetou,
resannualuse,resannualusetou,busannualuse,busannualusetou,
res_ckwh,res_ckwhtou,bus_ckwh,bus_ckwhtou)
names=c("revenue.real","rev_pcust","rev_pGWh","perchange_pcust","perchange_pGWh",
"resnetprice","resnetpricetou","busnetprice","busnetpricetou",
"resannualuse","resannualusetou","busannualuse","busannualusetou",
"res_ckwh","res_ckwhtou","bus_ckwh","bus_ckwhtou")
data$names=names
return(data)
}
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in, cust.in)
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
document()
load_all("c://R/packages/ptrm",T)
document()
#check package
check()
scenario.in="medium"
dnsp.in="SAPN" #("Energex","SAPN")
projyearend.in = 60
age=c(50,55,60,65)
slim=c(2,5,10,15)
addnew=c(25,15,10,5)
product=c(-1,-0.1,0,1)
rba=c(3,3,3,3)
cars=c(50,60,75,90)
solar=c(50,50,50,50)
batt=c(5,5,5,5)
cust=c(1.4,1.4,1.4,1.4)
custqld=c(2.38,2.38,2.38,2.38)
ogrid=c(5,5,5,5)
signal=c(0,0,0,0)
use=c(-0.9,-0.9,-0.9,-0.9)
scenario=c(1,2,3,4)
scen.name=c("extreme","high","medium","low")
input=cbind.data.frame(scen.name,scenario,age,slim,addnew,product,rba,cars,solar,batt,
cust,custqld,ogrid,signal,use)
scenario_num=ifelse(scenario.in=="extreme",1,ifelse(scenario.in=="high",2,ifelse(scenario.in=="medium",3,4)))
age.in=input$age[as.numeric(scenario_num)]
retireslim.in=input$slim[as.numeric(scenario_num)] #%
addnew.in=input$addnew[as.numeric(scenario_num)] #%
productivity.in=input$product[as.numeric(scenario_num)] #%
rba.in=input$rba[as.numeric(scenario_num)] #%
cars.in=input$cars[as.numeric(scenario_num)]#%
solar.in=input$solar[as.numeric(scenario_num)]#%
batt.in=input$batt[as.numeric(scenario_num)]#%
#which customer growth rate (need to change later in app)
cust.in=ifelse(dnsp.in=="Energex",input$custqld[as.numeric(scenario_num)],
input$cust[as.numeric(scenario_num)]) #%
ogrid.in=input$ogrid[as.numeric(scenario_num)]#%
signal.in=input$signal[as.numeric(scenario_num)]#%
use.in=input$use[as.numeric(scenario_num)]#%
setwd("C:/R/shiny/dabase_app")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
iab.df = read.csv("./data/alliab.csv")
labels=names(iab.df)
labels[1:5]=c("dnsp","dnspname","assetclass","assetname", "type")
labels[6:length(labels)]=as.character(21:83)
names(iab.df)=labels
df.real=ptrm_fun(assets.df,other.df, iab.df,projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in)
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in, cust.in)
#a: revenue with coloured stacked bars to show building blocks
df.bb=subset(df.real,df.real$type!="Revenue (real)")
df.bb=drop.terms(df.bb)
a=ggplot(df.bb,aes(x=year,y=cost, fill=type))+geom_bar(stat="identity")+theme_classic(base_size=15)+
theme(legend.title =element_blank())+theme(axis.text.x=element_text(size=14),axis.text.y=element_text(size=14))+
ggtitle("Annual revenue ($m, real terms)")+
scale_fill_manual(values=c("#fc8d59","#c7eae5", "#5ab4ac", "#02818a","#003c30"))+
theme(legend.position="bottom")+guides(fill=guide_legend(nrow=2,byrow=TRUE))+
ylab("Price ($m)")+xlab("Year")+ scale_x_continuous(expand = c(0.01, 0.5)) +
scale_y_continuous(expand = c(0, 0),limits = c(0,3500))+
geom_text(x=2059, y=(df.real$cost[df.real$year==2060&df.real$type=="Revenue (real)"]),
label=round((df.real$cost[df.real$year==2060&df.real$type=="Revenue (real)"]),digits=1),size=6)+
geom_text(x=2022, y=(df.real$cost[df.real$year==2021&df.real$type=="Revenue (real)"]),
label=round((df.real$cost[df.real$year==2021&df.real$type=="Revenue (real)"]),digits=1),size=6)
a
#price plots----
#b: price per customer (both small business and residential)
price_res=as.vector(t(subset(price.df,price.df$names=="resnetprice")))
price_res=as.numeric(price_res[1:length(price_res)-1])
#price_bus=as.vector(t(subset(price.df,price.df$names=="busnetprice")))
#price_bus=as.numeric(price_bus[1:length(price_bus)-1])
#    price_restou=as.vector(t(subset(price.df,price.df$names=="resnetpricetou")))
#   price_restou=as.numeric(price_restou[1:length(price_restou)-1])
#  price_bustou=as.vector(t(subset(price.df,price.df$names=="busnetpricetou")))
# price_bustou=as.numeric(price_bustou[1:length(price_bustou)-1])
yearlabel=as.vector(colnames(price.df))
yearlabel=as.numeric(yearlabel[1:length(yearlabel)-1])
yearlabel=yearlabel+2000
d1=cbind.data.frame(yearlabel,price_res)
names(d1)=c("yearlabel","price")
d1$fullname="Residential (non TOU)"
d1$type="Residential"
d1$tou="non TOU"
#  d2=cbind.data.frame(yearlabel,price_bus)
# names(d2)=c("yearlabel","price")
#  d2$fullname="Small business (non TOU)"
# d2$type="Small business"
#  d2$tou="non TOU"
# d3=cbind.data.frame(yearlabel,price_restou)
#names(d3)=c("yearlabel","price")
#d3$fullname="Residential (TOU)"
#  d3$type="Residential"
# d3$tou="TOU"
#  d4=cbind.data.frame(yearlabel,price_bustou)
#  names(d4)=c("yearlabel","price")
#  d4$fullname="Small business (TOU)"
#  d4$type="Small business"
#  d4$tou="TOU"
#data=rbind.data.frame(d1,d2,d3,d4)
data=d1
#data=data[1:(length(yearlabel)*4)-1,]
data$fullname=as.factor(data$fullname)
data$type=as.factor(data$type)
data$tou=as.factor(data$tou)
b=ggplot(data,aes(x=yearlabel,y=price,group=fullname)) +
geom_line(size=1,aes(linetype = tou, color = type))+
theme_classic(base_size=12)+
theme(axis.text.x=element_text(size=12),legend.text=element_text(size=12),
axis.text.y=element_text(size=12))+
#theme(legend.title =element_blank())+
#theme(legend.position="bottom")+
theme(legend.position="none")+
guides(linetype=guide_legend(nrow=2,byrow=TRUE),col=guide_legend(nrow=2,byrow=TRUE))+
ggtitle("Residential (non TOU) \n annual network bill per customer (real terms)")+
ylab("Annual bill ($m)")+xlab("Year")+scale_y_continuous(expand = c(0, 0),lim=c(0,4500))+
scale_color_manual(values=c("#fc8d59","#02818a"))+
geom_text(x=2058, y=(data$price[data$yearlabel=="2060"])+200,
label=round(data$price[data$yearlabel=="2060"],digits=1),size=5)+
geom_text(x=2024, y=(data$price[data$yearlabel=="2021"])+200,
label=round(data$price[data$yearlabel=="2021"],digits=1),size=5)
#label only residential in b and c
#c: price per energy unit (both small business and residential)
price_ures=as.vector(t(subset(price.df,price.df$names=="res_ckwh")))
price_ures=as.numeric(price_ures[1:length(price_ures)-1])
#  price_ubus=as.vector(t(subset(price.df,price.df$names=="bus_ckwh")))
#  price_ubus=as.numeric(price_ubus[1:length(price_ubus)-1])
# price_urestou=as.vector(t(subset(price.df,price.df$names=="res_ckwhtou")))
#  price_urestou=as.numeric(price_urestou[1:length(price_urestou)-1])
# price_ubustou=as.vector(t(subset(price.df,price.df$names=="bus_ckwhtou")))
#  price_ubustou=as.numeric(price_ubustou[1:length(price_ubustou)-1])
yearlabel=as.vector(colnames(price.df))
yearlabel=as.numeric(yearlabel[1:length(yearlabel)-1])
yearlabel=yearlabel+2000
d1=cbind.data.frame(yearlabel,price_ures)
names(d1)=c("yearlabel","price")
d1$fullname="Residential (non TOU)"
d1$type="Residential"
d1$tou="non TOU"
# d2=cbind.data.frame(yearlabel,price_ubus)
#  names(d2)=c("yearlabel","price")
# d2$fullname="Small business (non TOU)"
#  d2$type="Small business"
#  d2$tou="non TOU"
#  d3=cbind.data.frame(yearlabel,price_urestou)
#  names(d3)=c("yearlabel","price")
#  d3$fullname="Residential (TOU)"
#  d3$type="Residential"
#  d3$tou="TOU"
#  d4=cbind.data.frame(yearlabel,price_ubustou)
#  names(d4)=c("yearlabel","price")
#  d4$fullname="Small business (TOU)"
#  d4$type="Small business"
#  d4$tou="TOU"
# udata=rbind.data.frame(d1,d2,d3,d4)
udata=d1
# udata=udata[1:(length(yearlabel)*4)-1,]
udata$fullname=as.factor(udata$fullname)
udata$type=as.factor(udata$type)
udata$tou=as.factor(udata$tou)
c=ggplot(udata,aes(x=yearlabel,y=price,group=fullname)) +
geom_line(size=1,aes(linetype = tou, color = type))+
theme_classic(base_size=12)+
theme(axis.text.x=element_text(size=12),legend.text=element_text(size=12),
axis.text.y=element_text(size=12))+
#theme(legend.title =element_blank())+
#theme(legend.position="bottom")+
theme(legend.position="none")+
guides(linetype=guide_legend(nrow=2,byrow=TRUE),col=guide_legend(nrow=2,byrow=TRUE))+
ggtitle("Residential (non TOU) \n price per energy unit (c/kWh, real terms)")+
ylab("Price c/kWh ($m)")+xlab("Year")+ scale_y_continuous(expand = c(0, 0),lim=c(0,50))+
scale_color_manual(values=c("#fc8d59","#02818a"))+
geom_text(x=2058, y=(udata$price[udata$yearlabel=="2060"])+2,
label=round(udata$price[udata$yearlabel=="2060"],digits=1),size=5)+
geom_text(x=2024, y=(udata$price[udata$yearlabel=="2021"])+2,
label=round(udata$price[udata$yearlabel=="2021"],digits=1),size=5)
#building block plots ----
#d: real capex
#e: real opex
#f: nominal WACC
d=ggplot(df.real,aes(x=year,y=df.real$realcapex)) +geom_line(size=1)+theme_classic(base_size=12)+
theme(legend.title =element_blank())+
ggtitle("Capex (real terms)")+
ylab("Capex ($m)")+xlab("Year")+
scale_x_continuous(breaks=seq(2020,2060,by=20))+ scale_y_continuous(expand = c(0, 0),lim=c(250,1500))+
geom_text(x=2058, y=(df.real$realcapex[df.real$year=="2060"&df.real$type=="Tax (real)"])+50,
label=round(df.real$realcapex[df.real$year=="2060"&df.real$type=="Tax (real)"],digits=1),size=5)+
geom_text(x=2024, y=(df.real$realcapex[df.real$year=="2021"&df.real$type=="Tax (real)"])+50,
label=round(df.real$realcapex[df.real$year=="2021"&df.real$type=="Tax (real)"],digits=1),size=5)
df.opex=subset(df.real,df.real$type=="Opex (real)")
e=ggplot(df.opex,aes(x=year,y=cost)) +geom_line(size=1)+theme_classic(base_size=12)+
theme(legend.title =element_blank())+
scale_x_continuous(breaks=seq(2020,2060,by=20))+scale_y_continuous(expand = c(0, 0),lim=c(200,1000))+
ggtitle("Opex (real terms)")+
ylab("Opex ($m)")+xlab("Year")+theme(axis.text.x=element_text(size=12),axis.text.y=element_text(size=12))+
geom_text(x=2058, y=(df.opex$cost[df.opex$year=="2060"])+50,
label=round(df.opex$cost[df.opex$year=="2060"],digits=1),size=5)+
geom_text(x=2024, y=(df.opex$cost[df.opex$year=="2021"])+50,
label=round(df.opex$cost[df.opex$year=="2021"],digits=1),size=5)
#Real rate of return (%)
df.wacc=cbind.data.frame(df.real$year, df.real$realratereturn)
names(df.wacc)=c("year", "realratereturn")
df.wacc=distinct(df.wacc)
f=ggplot(df.wacc,aes(x=year,y=realratereturn)) +geom_line(size=1)+theme_classic(base_size=12)+
theme(legend.title =element_blank())+theme(axis.text.x=element_text(size=12),axis.text.y=element_text(size=12))+
scale_x_continuous(breaks=seq(2020,2060,by=20))+scale_y_continuous(expand = c(0, 0),lim=c(2.75,4.6))+
ggtitle("Real rate of return")+
ylab("(%)")+xlab("Year")+ #scale_x_continuous(expand = c(0,0)) +
geom_text(x=2058, y=(df.wacc$realratereturn[df.wacc$year=="2060"])+0.1,
label=round(df.wacc$realratereturn[df.wacc$year=="2060"],digits=1),size=5)+
geom_text(x=2021, y=(df.wacc$realratereturn[df.wacc$year=="2021"])+0.1,
label=round(df.wacc$realratereturn[df.wacc$year=="2021"],digits=1),size=5)
#row 4
#g: real RAB
g=ggplot(df.real,aes(x=year,y=df.real$realrab)) +geom_line(size=1)+theme_classic(base_size=12)+
theme(legend.title =element_blank())+theme(axis.text.x=element_text(size=12),axis.text.y=element_text(size=12))+
scale_x_continuous(breaks=seq(2020,2060,by=20))+scale_y_continuous(expand = c(0, 0),lim=c(3000,26000))+
ggtitle("RAB (real terms)")+
ylab("RAB ($m)")+xlab("Year")+# scale_x_continuous(expand = c(0,0))+
geom_text(x=2057, y=(df.real$realrab[df.real$year=="2060"&df.real$type=="Tax (real)"])+750,
label=round(df.real$realrab[df.real$year=="2060"&df.real$type=="Tax (real)"],digits=1),size=5)+
geom_text(x=2024, y=(df.real$realrab[df.real$year=="2021"&df.real$type=="Tax (real)"])+750,
label=round(df.real$realrab[df.real$year=="2021"&df.real$type=="Tax (real)"],digits=1),size=5)
#energy numbers and volumes plots----
#h: customer numbers
#i: energy volumes (label it energy sales)
cust_num=(as.vector(t(subset(energyvol.df,energyvol.df$names=="Customers on grid"))))
cust_num=as.numeric(cust_num[1:length(cust_num)-1])/1000000
energy_vol=(as.vector(t(subset(energyvol.df,energyvol.df$names=="Energy volumes"))))
energy_vol=as.numeric(energy_vol[1:length(energy_vol)-1])/1000
yearlabel=as.vector(colnames(energyvol.df))
yearlabel=as.numeric(yearlabel[1:length(yearlabel)-1])
yearlabel=yearlabel+2000
edata=cbind.data.frame(yearlabel,cust_num,energy_vol)
# edata=edata[1:(length(yearlabel))-1,]
h=ggplot(edata,aes(x=yearlabel,y=edata$cust_num)) +geom_line(size=1)+theme_classic(base_size=12)+
theme(legend.title =element_blank())+theme(axis.text.x=element_text(size=12),axis.text.y=element_text(size=12))+
ggtitle("Number of customers on grid")+
ylab("Customer numbers (m)")+xlab("Year")+
scale_x_continuous(breaks=seq(2020,2060,by=20))+#scale_y_continuous(expand = c(0, 0),lim=c(0.8,2.5))+
geom_text(x=2058, y=(edata$cust_num[edata$yearlabel=="2059"])-0.2,
label=round(edata$cust_num[edata$yearlabel=="2059"],digits=1),size=5)+
geom_text(x=2022, y=(edata$cust_num[edata$yearlabel=="2021"])+0.1,
label=round(edata$cust_num[edata$yearlabel=="2021"],digits=1),size=5)
i=ggplot(edata,aes(x=yearlabel,y=edata$energy_vol)) +geom_line(size=1)+theme_classic(base_size=12)+
theme(legend.title =element_blank())+theme(axis.text.x=element_text(size=12),axis.text.y=element_text(size=12))+
ggtitle("Energy sales")+
ylab("Sales (1000 GWh)")+xlab("Year")+
scale_x_continuous(breaks=seq(2020,2060,by=20))+#scale_y_continuous(expand = c(0, 0),lim=c(8,21))+
geom_text(x=2058, y=(edata$energy_vol[edata$yearlabel=="2059"])-2,
label=round(edata$energy_vol[edata$yearlabel=="2059"],digits=1),size=5)+
geom_text(x=2022, y=(edata$energy_vol[edata$yearlabel=="2021"])+1,
label=round(edata$energy_vol[edata$yearlabel=="2021"],digits=1),size=5)
b
c
d
e
f
g
h
i
runApp()
runApp()
runApp()
#call function from package # no need to subset for
df.real=ptrm_fun(assets.df,other.df, iab.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in)
#call energy volumes with electric cars #subsets dnsp inside function
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in, cust.in)
rev_pGWh=subset(price.df,price.df$names=="rev_pGWh")
rev_pGWh
#mapping variable:
pchange2160_pGWh=((rev_pGWh[40]-rev_pGWh[1])/rev_pGWh[1])*100
pchange2160_pGWh
rev_pGWh[40]
loopall_fun=function(assets.df,other.df, iab.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in){
#call function from package # no need to subset for
df.real=ptrm_fun(assets.df,other.df, iab.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in)
#call energy volumes with electric cars #subsets dnsp inside function
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in, cust.in)
#rev_pcust=subset(price.df,price.df$names=="rev_pcust")
rev_pGWh=subset(price.df,price.df$names=="rev_pGWh")
#mapping variable: #one number
pchange2160_pGWh=((rev_pGWh[40]-rev_pGWh[1])/rev_pGWh[1])*100
return(pchange2160_pGWh)
}
d.name=c("Energex","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
nodnsp=length(d.name)
nodnsp
dnsp.in
nodnsp=length(d.name)
nodnsp
dnsp.in
as.numeric(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
dnsp.in
dnsp
j=1
dnsp.in=(dnsp.df$d.name[dnsp.df$d.code==j])
dnsp.in
dnsp.in=as.character(dnsp.df$d.name[dnsp.df$d.code==j])
dnsp.in
j=2
dnsp.in=as.character(dnsp.df$d.name[dnsp.df$d.code==j])
d.name=c("Energex","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
dnsp.df$price=NA
dnsp.df
price=dnsp.df$price
price
j=1
dnsp.in=as.character(dnsp.df$d.name[dnsp.df$d.code==j])
#function to loop - gives one value of percent change between 2020 and 2060
price[j]=loopall_fun(assets.df,other.df, iab.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
price
for (j in 1:nodnsp) {
dnsp.in=as.character(dnsp.df$d.name[dnsp.df$d.code==j])
#function to loop - gives one value of percent change between 2020 and 2060
price[j]=loopall_fun(assets.df,other.df, iab.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
}
price
dnsp.df$price=price
dnsp.df
dnsp.df$d.name
#eventually can just use price vector
sapn=as.numeric(round(dnsp.df$price[dnsp.df$d.name=="SAPN"],digits=1))
energex=as.numeric(round(dnsp.df$price[dnsp.df$d.name=="Energex"],digits=1))
(round(dnsp.df$price[dnsp.df$d.name=="SAPN"],digits=1))
dnsp.df$price[dnsp.df$d.name=="SAPN"]
as.vector(price)
as.numeric(price)
price=as.numeric(price)
dnsp.df$price=price
#eventually can just use price vector
sapn=(round(dnsp.df$price[dnsp.df$d.name=="SAPN"],digits=1))
sapn
energex=(round(dnsp.df$price[dnsp.df$d.name=="Energex"],digits=1))
energex
energex=(round(dnsp.df$price[dnsp.df$d.name=="Energex"],digits=2))
energex
price=c(0,0,0,0,energex,0,0,sapn,0,0,0,0,0,0)
name=c("ausgrid"  , "essential", "evoenergy" ,"endeavour" ,"energex",   "ergon", "pandw","sapn","tasnet","ausnet",
"citipower", "powercor","united","jemena")
name.lab=c("Ausgrid"  , "Essential Energy", "Evoenergy" ,"Endeavour Energy" ,"Energex", "Ergon Energy",
"Power and Water","SA Power Networks","Tasnet","Ausnet",
"Citipower", "Powercor","United Energy","Jemena")
#  state=as.character(alldnsp$state)
state=c("NSW", "NSW", "ACT", "NSW", "QLD", "QLD" ,"NT"  ,"SA",  "TAS", "VIC", "VIC", "VIC", "VIC" ,"VIC")
labels=c(" "," "," "," "," "," "," ",paste(saeq, "%")," "," "," "," "," "," ")
labels=gsub(" ", "", labels, fixed = TRUE)
state.name=paste(state,name)
data <- cbind.data.frame(price,labels,name, name.lab,state,state.name)
data = data[order(state),]
data$order=1:14
#draw bar graph ----
#individual state colours
colours=(values=c("#a50026","#fc8d59", "#fee08b","#c7eae5" ,"#02818a","#003c30"))
colours = colorRampPalette(colours)(7)
#heat map price colours
#  colours=(values=c("#000066","#4080bf","#339966","#00ff80","#ffff00","#ffbf00","#ff8000","#e62e00"))
# catMethod = c(seq(-200,0,by=50),1,(seq(50,200,by=50)))
#  colours1 = colorRampPalette(colours)(length(catMethod))
# ltitle="% Price increase"
q= ggplot(data, aes(y=price, x=reorder(name.lab,order), label=labels)) +
geom_bar(position="dodge", stat="identity", col="grey",aes(fill=factor(state)))+
theme_classic(base_size=20)+theme(legend.title =element_blank())+
theme(plot.title = element_text(hjust = 0.5))+geom_text(size=6)+
ggtitle("Percent price increase (pGWh) \n from 2020 to 2060")+
ylab("Price increase (%)")+xlab("")+theme(axis.text.x = element_text(angle = 90,size=16))+
scale_fill_manual(values = colours)+ #state colours
#scale_fill_gradientn(colours=colours1, limits = c(-200, 200))+ #for heat map colours
scale_y_continuous(limits = c(-50,150))+geom_hline(yintercept = 0)+
theme(plot.margin=unit(c(0.5,0.5,0,0.5),"cm"))+theme(axis.text.y=element_text(size=16))
q
price=c(0,0,0,0,energex,0,0,sapn,0,0,0,0,0,0)
price
name=c("ausgrid"  , "essential", "evoenergy" ,"endeavour" ,"energex",   "ergon", "pandw","sapn","tasnet","ausnet",
"citipower", "powercor","united","jemena")
name.lab=c("Ausgrid"  , "Essential Energy", "Evoenergy" ,"Endeavour Energy" ,"Energex", "Ergon Energy",
"Power and Water","SA Power Networks","Tasnet","Ausnet",
"Citipower", "Powercor","United Energy","Jemena")
#  state=as.character(alldnsp$state)
state=c("NSW", "NSW", "ACT", "NSW", "QLD", "QLD" ,"NT"  ,"SA",  "TAS", "VIC", "VIC", "VIC", "VIC" ,"VIC")
labels=c(" "," "," "," "," "," "," ",paste(saeq, "%")," "," "," "," "," "," ")
labels=gsub(" ", "", labels, fixed = TRUE)
state.name=paste(state,name)
data = data[order(state),]
data$order=1:14
#draw bar graph ----
#individual state colours
colours=(values=c("#a50026","#fc8d59", "#fee08b","#c7eae5" ,"#02818a","#003c30"))
colours = colorRampPalette(colours)(7)
ggplot(data, aes(y=price, x=reorder(name.lab,order), label=labels)) +
geom_bar(position="dodge", stat="identity", col="grey",aes(fill=factor(state)))+
theme_classic(base_size=20)+theme(legend.title =element_blank())+
theme(plot.title = element_text(hjust = 0.5))+geom_text(size=6)+
ggtitle("Percent price increase (pGWh) \n from 2020 to 2060")+
ylab("Price increase (%)")+xlab("")+theme(axis.text.x = element_text(angle = 90,size=16))+
scale_fill_manual(values = colours)+ #state colours
#scale_fill_gradientn(colours=colours1, limits = c(-200, 200))+ #for heat map colours
scale_y_continuous(limits = c(-50,150))+geom_hline(yintercept = 0)+
theme(plot.margin=unit(c(0.5,0.5,0,0.5),"cm"))+theme(axis.text.y=element_text(size=16))
labels=c(" "," "," "," ",paste(energex, "%")," "," ",paste(sapn, "%")," "," "," "," "," "," ")
labels
labels=gsub(" ", "", labels, fixed = TRUE)
state.name=paste(state,name)
data <- cbind.data.frame(price,labels,name, name.lab,state,state.name)
data = data[order(state),]
data$order=1:14
#draw bar graph ----
#individual state colours
colours=(values=c("#a50026","#fc8d59", "#fee08b","#c7eae5" ,"#02818a","#003c30"))
colours = colorRampPalette(colours)(7)
#heat map price colours
#  colours=(values=c("#000066","#4080bf","#339966","#00ff80","#ffff00","#ffbf00","#ff8000","#e62e00"))
# catMethod = c(seq(-200,0,by=50),1,(seq(50,200,by=50)))
#  colours1 = colorRampPalette(colours)(length(catMethod))
# ltitle="% Price increase"
q= ggplot(data, aes(y=price, x=reorder(name.lab,order), label=labels)) +
geom_bar(position="dodge", stat="identity", col="grey",aes(fill=factor(state)))+
theme_classic(base_size=20)+theme(legend.title =element_blank())+
theme(plot.title = element_text(hjust = 0.5))+geom_text(size=6)+
ggtitle("Percent price increase (pGWh) \n from 2020 to 2060")+
ylab("Price increase (%)")+xlab("")+theme(axis.text.x = element_text(angle = 90,size=16))+
scale_fill_manual(values = colours)+ #state colours
#scale_fill_gradientn(colours=colours1, limits = c(-200, 200))+ #for heat map colours
scale_y_continuous(limits = c(-50,150))+geom_hline(yintercept = 0)+
theme(plot.margin=unit(c(0.5,0.5,0,0.5),"cm"))+theme(axis.text.y=element_text(size=16))
q
runApp()
runApp()
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
load_all("c://R/packages/ptrm",T)
document()
#check package
check()
setwd("c://R/packages/ptrm")
document()
load_all("c://R/packages/ptrm",T)
#check package
check()
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
shiny::runApp('C:/R/shiny/dabase_app')
