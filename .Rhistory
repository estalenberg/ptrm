#G9 = propdebtfun = Proportion of Debt Funding
#G15 =  Real Pre-tax Return on Debt =(1+G14)/(1+G6)-1 = rate real debt return
#G14 = rdebt.df[1:10] = Nominal Pre-tax Return on Debt 	(Varying)	#nominal means inflation is taken into account
#=IF(OR(ISBLANK('PTRM input'!K222),'PTRM input'!K222=0),J14,'PTRM input'!K222) #this means that if the input of the nominal pre-tax return on debt is blank or zero, make it the final prediction (in this case 0.0503)
#G6 = infl = Inflation rate
raterealdebtreturn=((1+rdebt.df)/(1+infl)-1) #real is where impact of inflation is removed
#df capped at 2.47%, as return on debt is capped at final (5th year) input 5.03%
#real vanilla WACC vector - WACC row 19
rvanilla=(propeqfund*raterealequityreturn)+(propdebtfund*raterealdebtreturn)
#df with years from 2020 capped at 0.033
#cif ----
#cif ----
#from package
cifyears=(1:(noyears+1))
cif.df=cif_fun(cifyears,infl, startyearend, projyearend)
cif.df
#net capex ----
#need to change this so that sa and ausgrid have the same inputs
#replace na for 0 - na results in an error and ptrm treats na for zero in capex
baseR.na   <- function(x) { x[is.na(x)] <- 0; x }
assets.orig=assets.df
assets.df=baseR.na(assets.orig[,(which(colnames(assets.orig)=="fccustcontrib20")):length(assets.orig)]) #from column 10 (start of capex inputs) change na's to zeros
assets.df=cbind.data.frame(assets.orig[,1:(which(colnames(assets.orig)=="taxstdlife"))],assets.df)
#View(assets.df)
#net capex - all below are 5 year inputs
col1=which(names(assets.df)=="fcnetcapex20")
end1=which(names(assets.df)=="fcnetcapex24")
fcnetcapex=(assets.df[col1:end1])
#customer contributions
col1=which(names(assets.df)=="fccustcontrib20")
end1=which(names(assets.df)=="fccustcontrib24")
fccust=(assets.df[col1:end1])
#net capex #5 years
#fcnetcapex.df=fccapex-fcasset-fccust
#fccust contrib predictions----
#add additional years to cust contributions and net capex
#need to changetake average and not final values ###
assetclass=1:noassets
yearslabel=(startyearend:projyearend)
yearslabel=yearslabel[2:length(yearslabel)]
result3 <- matrix(NA, ncol=length(yearslabel-1), nrow=length(assetclass))
result3=as.data.frame(result3)
names(result3)=yearslabel
#make customer contributions equal to final year of inputs (i.e.2024)
fcyears=(1:length(fccust)) #how many years do we have - 5?
result3[assetclass, fcyears]=fccust #make first 5 years equal to inputs
result3[,(length(fccust)+1):length(result3)]=fccust[length(fccust)] #make the rest equal to the final year (2024)
fccust.full=result3
#using package
fcnetavg.full=netcapex_fun(fcnetcapex,yearslabel,noassets,noyears, age, productivity, networksize)
fcnetavg.full
capexyears=((startyearend+1):projyearend) #will delete 2019 in next step
res <- matrix(0, ncol=length(capexyears), nrow=1) #one at a time
ac=1
res <- matrix(0, ncol=length(capexyears), nrow=1) #one at a time
res=as.data.frame(res)
names(res)=capexyears
res$asset=as.character(ac)
res$value=NA
s=stdlife[ac]
s=ifelse(is.na(s),0,s)
nc=fcnetavg.full[ac,]
v=rvanilla
s
#remlife
rl=res
rl1=remlife[ac]
rl[,1]=rl1
#f11
#opening asset value=oav
oav=res
oav1=oavalue[ac]
oav[,1]=oav1 #f10
#origcost=c #f2=F10*F15/F11
oc=res
oc[,1]=ifelse(is.na(rl1),oav1,ifelse(rl1==0,0,(oav1*s/rl1)))
rd=res
rd[,1]=ifelse(is.na(rl1)|rl1==0,0,(ifelse(rl1>1,oav1/rl1,oc[,1]-oav1)))
rdtest=res
rdtest[,1]=1
rdtest
for(i in 2:noyears){
oc[i]=ifelse((rl[(i-1)]<1),
(nc[,(i-1)]*(1+v[,(i-1)])^0.5),
oc[i-1]+(nc[,(i-1)]*(1+v[,(i-1)])^0.5))
oav[i]=ifelse(rl[i-1]<1,oc[i],(oc[i]-(oc[i-1]-oav[i-1])-rd[i-1]))
rl[i]=ifelse(is.na(rl[(i-1)]),NA,ifelse((oc[i]==0),0,(oav[i]/oc[i]*s)))
rdtest[i]=max(1,which(rl==s))
rd[i]=ifelse(is.na(rl[i]),0,ifelse((rl[i]==0),0,
(ifelse(rl[i]>1,oav[i]/rl[i],
(ifelse(rdtest[i]>1,(oc[i]-sum(rd[,as.numeric(rdtest[i]):(i-1)], na.rm=T)),
(oc[i]-(sum(rd[,1:(i-1)],na.rm=T)+(oc[1]-oav[1])))))))))
}
oc$value="oc"
oav$value="oav"
rl$value="rl"
rd$value="rd"
rd
rdtest
ac=11
capexyears=((startyearend+1):projyearend) #will delete 2019 in next step
#res <- matrix(NA, ncol=length(capexyears), nrow=noassets) #matrix for each asset class
res <- matrix(0, ncol=length(capexyears), nrow=1) #one at a time
res=as.data.frame(res)
names(res)=capexyears
res$asset=as.character(ac)
res$value=NA
s=stdlife[ac]
s=ifelse(is.na(s),0,s)
nc=fcnetavg.full[ac,]
v=rvanilla
#remlife
rl=res
rl1=remlife[ac]
rl[,1]=rl1
#f11
#opening asset value=oav
oav=res
oav1=oavalue[ac]
oav[,1]=oav1 #f10
#origcost=c #f2=F10*F15/F11
oc=res
oc[,1]=ifelse(is.na(rl1),oav1,ifelse(rl1==0,0,(oav1*s/rl1)))
#regdeprec=rd #f18=IF(F11>1,F10/F11,F2-F10)
rd=res
rd[,1]=ifelse(is.na(rl1)|rl1==0,0,(ifelse(rl1>1,oav1/rl1,oc[,1]-oav1)))
rdtest=res
rdtest[,1]=1
#y2 and beyond
for(i in 2:noyears){
oc[i]=ifelse((rl[(i-1)]<1),
(nc[,(i-1)]*(1+v[,(i-1)])^0.5),
oc[i-1]+(nc[,(i-1)]*(1+v[,(i-1)])^0.5))
oav[i]=ifelse(rl[i-1]<1,oc[i],(oc[i]-(oc[i-1]-oav[i-1])-rd[i-1]))
rl[i]=ifelse(is.na(rl[(i-1)]),NA,ifelse((oc[i]==0),0,(oav[i]/oc[i]*s)))
rdtest[i]=max(1,which(rl==s))
rd[i]=ifelse(is.na(rl[i]),0,ifelse((rl[i]==0),0,
(ifelse(rl[i]>1,oav[i]/rl[i],
(ifelse(rdtest[i]>1,(oc[i]-sum(rd[,as.numeric(rdtest[i]):(i-1)], na.rm=T)),
(oc[i]-(sum(rd[,1:(i-1)],na.rm=T)+(oc[1]-oav[1])))))))))
rdtest
}
capexyears=((startyearend+1):projyearend) #will delete 2019 in next step
#res <- matrix(NA, ncol=length(capexyears), nrow=noassets) #matrix for each asset class
res <- matrix(0, ncol=length(capexyears), nrow=1) #one at a time
res=as.data.frame(res)
names(res)=capexyears
res$asset=as.character(ac)
res$value=NA
s=stdlife[ac]
s=ifelse(is.na(s),0,s)
nc=fcnetavg.full[ac,]
v=rvanilla
#remlife
rl=res
rl1=remlife[ac]
rl[,1]=rl1
#f11
#opening asset value=oav
oav=res
oav1=oavalue[ac]
oav[,1]=oav1 #f10
#origcost=c #f2=F10*F15/F11
oc=res
oc[,1]=ifelse(is.na(rl1),oav1,ifelse(rl1==0,0,(oav1*s/rl1)))
#regdeprec=rd #f18=IF(F11>1,F10/F11,F2-F10)
rd=res
rd[,1]=ifelse(is.na(rl1)|rl1==0,0,(ifelse(rl1>1,oav1/rl1,oc[,1]-oav1)))
rdtest=res
rdtest[,1]=1
#y2 and beyond
for(i in 2:noyears){
oc[i]=ifelse((rl[(i-1)]<1),
(nc[,(i-1)]*(1+v[,(i-1)])^0.5),
oc[i-1]+(nc[,(i-1)]*(1+v[,(i-1)])^0.5))
oav[i]=ifelse(rl[i-1]<1,oc[i],(oc[i]-(oc[i-1]-oav[i-1])-rd[i-1]))
rl[i]=ifelse(is.na(rl[(i-1)]),NA,ifelse((oc[i]==0),0,(oav[i]/oc[i]*s)))
rdtest[i]=max(1,which(rl==s))
rd[i]=ifelse(is.na(rl[i]),0,ifelse((rl[i]==0),0,
(ifelse(rl[i]>1,oav[i]/rl[i],
(ifelse(rdtest[i]>1,(oc[i]-sum(rd[,as.numeric(rdtest[i]):(i-1)], na.rm=T)),
(oc[i]-(sum(rd[,1:(i-1)],na.rm=T)+(oc[1]-oav[1])))))))))
}
rdtest
rd
capexyears
years
yearslabel
capexyears
warl.fun <- function(ac, yearslabel, fcnetavg.full, rvanilla, remlife, stdlife, oavalue,
noyears){
res <- matrix(0, ncol=length(yearslabel), nrow=1) #one at a time
res=as.data.frame(res)
names(res)=yearslabel
res$asset=as.character(ac)
res$value=NA
s=stdlife[ac]
s=ifelse(is.na(s),0,s)
nc=fcnetavg.full[ac,]
v=rvanilla
#year 1
#remlife
rl=res
rl1=remlife[ac]
rl[,1]=rl1
#opening asset value=oav
oav=res
oav1=oavalue[ac]
oav[,1]=oav1
#origcost=oc
oc=res
oc[,1]=ifelse(is.na(rl1),oav1,ifelse(rl1==0,0,(oav1*s/rl1)))
#regdeprec=rd
rd=res
rd[,1]=ifelse(is.na(rl1)|rl1==0,0,(ifelse(rl1>1,oav1/rl1,oc[,1]-oav1)))
rdtest=res
rdtest[,1]=1
#y2 and beyond
for(i in 2:noyears){
oc[i]=ifelse((rl[(i-1)]<1),
(nc[,(i-1)]*(1+v[,(i-1)])^0.5),
oc[i-1]+(nc[,(i-1)]*(1+v[,(i-1)])^0.5))
oav[i]=ifelse(rl[i-1]<1,oc[i],(oc[i]-(oc[i-1]-oav[i-1])-rd[i-1]))
rl[i]=ifelse(is.na(rl[(i-1)]),NA,ifelse((oc[i]==0),0,(oav[i]/oc[i]*s)))
rdtest[i]=max(1,which(rl==s))
rd[i]=ifelse(is.na(rl[i]),0,ifelse((rl[i]==0),0,
(ifelse(rl[i]>1,oav[i]/rl[i],
(ifelse(rdtest[i]>1,(oc[i]-sum(rd[,as.numeric(rdtest[i]):(i-1)], na.rm=T)),
(oc[i]-(sum(rd[,1:(i-1)],na.rm=T)+(oc[1]-oav[1])))))))))
}
oc$value="oc"
oav$value="oav"
rl$value="rl"
rd$value="rd"
df=rbind.data.frame(oc,oav,rl,rd)
return(df)
}
ac=1
ac=11
test1=warl.fun(ac, yearslabel, fcnetavg.full, rvanilla, remlife, stdlife, oavalue,
noyears)
test1
res_all <- NULL
for (i in 1:noassets){
ac=i
tmp=warl.fun(ac, yearslabel, fcnetavg.full, rvanilla, remlife, stdlife, oavalue,
noyears)
res_all <- rbind(res_all, tmp)
}
res_all
res_all$asset==11
res_all$asset=11
res_all <- NULL
for (i in 1:noassets){
ac=i
tmp=warl.fun(ac, yearslabel, fcnetavg.full, rvanilla, remlife, stdlife, oavalue,
noyears)
res_all <- rbind(res_all, tmp)
}
subset(res_all$asset==11)
subset(res_all,res_all$asset==11)
s
subset(res_all,res_all$asset==1)
ac
s
remlife
stdlife
rvanilla
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
#check function
?warl_fun()
document()
#check function
?warl_fun()
document()
#check function
?warl_fun()
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
#check function
?warl_fun()
#or
load_all("c://R/packages/ptrm",T)
document()
#check function
?warl_fun()
document()
#check package
check()
res_all$value
origcost_all=subset(res_all$value=="oc")
origcost_all=subset(res_all,res_all$value=="oc")
origcost_all
res_all$value
res_all <- NULL
for (i in 1:noassets){
ac=i
tmp=warl.fun(ac, yearslabel, fcnetavg.full, rvanilla, remlife, stdlife, oavalue,
noyears)
res_all <- rbind(res_all, tmp)}
origcost_all=subset(res_all,res_all$value=="oc")
oav_all=subset(res_all,res_all$value=="oav")
remlife_all=subset(res_all,res_all$value=="rl")
regdeprec_all=subset(res_all,res_all$value=="rd")
regdeprec_all
remlife
iab.fun=function(y,remlife,oavalue,assetclass)
{
iabstart=ifelse(remlife>0,oavalue/remlife,0) #vector for each asset class - but get rid of infinite values
if(length(y)<2){y=iabstart[assetclass]}else{
for(i in 1:length(y))
if(y[i]<2){y[i]=iabstart[assetclass]}else{
# if(is.na(remlife[assetclass])){y[i]=0}else{ #the 'accounting' cell format has 0=NA in excel
if(is.na(remlife[assetclass])){y[i]=NA}else{ #use this to keep consistent with PTRM
if(y[i]>remlife[assetclass]){#get rid of this line to smooth out predictions
y[i]=(oavalue[assetclass]-sum(y[1:(i-1)]))}else{ #here too
y[i]=iabstart[assetclass]
} #end of decreasing loop
}
}
}
y
}
assetclass
years
#loop again to calculate for each asset class
iab.yrs=1:noyears
years
years
assetclass
oavalue
remlife
iab.fun=function(y,remlife,oavalue,assetclass,years)
{
#static inputs
iabstart=ifelse(remlife>0,oavalue/remlife,0) #vector for each asset class - but get rid of infinite values
tmp <- matrix(NA, ncol=length(yearslabel-1), nrow=length(assetclass))
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
#formula
for (j in 1:noassets) {
assetclass=j
if(length(years)<2){tmp[assetclass,1]=iabstart[assetclass]}else{
for(i in 1:length(years))
if(tmp[assetclass,i]<2){tmp[assetclass,i]=iabstart[assetclass]}else{
# if(is.na(remlife[assetclass])){y[i]=0}else{ #the 'accounting' cell format has 0=NA in excel
if(is.na(remlife[assetclass])){tmp[assetclass,i]=NA}else{ #use this to keep consistent with PTRM
if(tmp[assetclass,i]>remlife[assetclass]){#get rid of this line to smooth out predictions
tmp[assetclass,i]=(oavalue[assetclass]-sum(tmp[assetclas,(1:(i-1))]))}else{ #here too
tmp[assetclass,i]=iabstart[assetclass]
} #end of decreasing loop
}
}
}
}
iab.all=tmp
return(iab.all)
}
iab.fun=function(remlife,oavalue,assetclass,years)
{
#static inputs
iabstart=ifelse(remlife>0,oavalue/remlife,0) #vector for each asset class - but get rid of infinite values
tmp <- matrix(NA, ncol=length(yearslabel-1), nrow=length(assetclass))
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
#formula
for (j in 1:noassets) {
assetclass=j
if(length(years)<2){tmp[assetclass,1]=iabstart[assetclass]}else{
for(i in 1:length(years))
if(tmp[assetclass,i]<2){tmp[assetclass,i]=iabstart[assetclass]}else{
# if(is.na(remlife[assetclass])){y[i]=0}else{ #the 'accounting' cell format has 0=NA in excel
if(is.na(remlife[assetclass])){tmp[assetclass,i]=NA}else{ #use this to keep consistent with PTRM
if(tmp[assetclass,i]>remlife[assetclass]){#get rid of this line to smooth out predictions
tmp[assetclass,i]=(oavalue[assetclass]-sum(tmp[assetclas,(1:(i-1))]))}else{ #here too
tmp[assetclass,i]=iabstart[assetclass]
} #end of decreasing loop
}
}
}
}
iab.all=tmp
return(iab.all)
}
iab.fun(remlife,oavalue,assetclass,years)
for(i in 1:length(years))
if(tmp[assetclass,i]<2){tmp[assetclass,i]=iabstart[assetclass]}else{
if(is.na(remlife[assetclass])){tmp[assetclass,i]=NA}else{
if(tmp[assetclass,i]>remlife[assetclass]){#get rid of this line to smooth out predictions
tmp[assetclass,i]=(oavalue[assetclass]-sum(tmp[assetclas,(1:(i-1))]))}else{ #here too
tmp[assetclass,i]=iabstart[assetclass]
}
}
}
iabstart=ifelse(remlife>0,oavalue/remlife,0) #vector for each asset class - but get rid of infinite values
tmp <- matrix(NA, ncol=length(yearslabel-1), nrow=length(assetclass))
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
assetclass=1
if(length(years)<2){tmp[assetclass,1]=iabstart[assetclass]}else{
for(i in 1:length(years))
if(tmp[assetclass,i]<2){tmp[assetclass,i]=iabstart[assetclass]}else{
if(is.na(remlife[assetclass])){tmp[assetclass,i]=NA}else{
if(tmp[assetclass,i]>remlife[assetclass]){#get rid of this line to smooth out predictions
tmp[assetclass,i]=(oavalue[assetclass]-sum(tmp[assetclas,(1:(i-1))]))}else{ #here too
tmp[assetclass,i]=iabstart[assetclass]
} #end of decreasing loop
}
}
}
assetclass
if(length(years)<2){tmp[assetclass,1]=iabstart[assetclass]}else{
for(i in 1:length(years))
ifelse((tmp[assetclass,i]<2),(tmp[assetclass,i]=iabstart[assetclass]),
ifelse((is.na(remlife[assetclass])),(tmp[assetclass,i]=NA),
ifelse((tmp[assetclass,i]>remlife[assetclass]),
(tmp[assetclass,i]=(oavalue[assetclass]-sum(tmp[assetclass,(1:(i-1))]))),
(tmp[assetclass,i]=iabstart[assetclass]))))
}
tmp
iab.fun=function(remlife,oavalue,assetclass,years)
{
#static inputs
iabstart=ifelse(remlife>0,oavalue/remlife,0) #vector for each asset class - but get rid of infinite values
tmp <- matrix(NA, ncol=length(yearslabel-1), nrow=length(assetclass))
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
#formula
for (j in 1:noassets) {
assetclass=j
if(length(years)<2){tmp[assetclass,1]=iabstart[assetclass]}else{
for(i in 1:length(years))
ifelse((tmp[assetclass,i]<2),(tmp[assetclass,i]=iabstart[assetclass]),
ifelse((is.na(remlife[assetclass])),(tmp[assetclass,i]=NA),
ifelse((tmp[assetclass,i]>remlife[assetclass]),
(tmp[assetclass,i]=(oavalue[assetclass]-sum(tmp[assetclass,(1:(i-1))]))),
(tmp[assetclass,i]=iabstart[assetclass]))))
}
}
iab.all=tmp
return(iab.all)
}
iab.fun(remlife,oavalue,assetclass,years)
iabstart=ifelse(remlife>0,oavalue/remlife,0) #vector for each asset class - but get rid of infinite values
tmp <- matrix(NA, ncol=length(yearslabel-1), nrow=length(assetclass))
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
#formula
for (j in 1:noassets) {
assetclass=j
if(length(years)<2){tmp[assetclass,1]=iabstart[assetclass]}else{
for(i in 1:length(years))
if(tmp[assetclass,i]<2){tmp[assetclass,i]=iabstart[assetclass]}else{
if(is.na(remlife[assetclass])){tmp[assetclass,i]=NA}else{
if(tmp[assetclass,i]>remlife[assetclass]){#get rid of this line to smooth out predictions
tmp[assetclass,i]=(oavalue[assetclass]-sum(tmp[assetclass,(1:(i-1))]))}else{ #here too
tmp[assetclass,i]=iabstart[assetclass]
} #end of decreasing loop
}
}
}
}
iab.all=tmp
oavalue
remlife
iab_fun=function(y,remlife,oavalue,assetclass)
{
iabstart=ifelse(remlife>0,oavalue/remlife,0) #vector for each asset class - but get rid of infinite values
if(length(y)<2){y=iabstart[assetclass]}else{
for(i in 1:length(y))
if(y[i]<2){y[i]=iabstart[assetclass]}else{
# if(is.na(remlife[assetclass])){y[i]=0}else{ #the 'accounting' cell format has 0=NA in excel
if(is.na(remlife[assetclass])){y[i]=NA}else{ #use this to keep consistent with PTRM
if(y[i]>remlife[assetclass]){#get rid of this line to smooth out predictions
y[i]=(oavalue[assetclass]-sum(y[1:(i-1)]))}else{ #here too
y[i]=iabstart[assetclass]
} #end of decreasing loop
}
}
}
y
}
assetclass
years
iab_fun(years,remlife,oavalue,assetclass)
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
#check function
?iab_fun()
#or
load_all("c://R/packages/ptrm",T)
#check function
?iab_fun()
#check function
?netcapex_fun()
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
#check function
?netcapex_fun()
#or
load_all("c://R/packages/ptrm",T)
#check function
?netcapex_fun()
?ptrm::iab_fun()
