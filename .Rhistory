retireslim.in=input$slim[as.numeric(scenario_num)] #%
addnew.in=input$addnew[as.numeric(scenario_num)] #%
productivity.in=input$product[as.numeric(scenario_num)] #%
rba.in=input$rba[as.numeric(scenario_num)] #%
cars.in=input$cars[as.numeric(scenario_num)]#%
solar.in=input$solar[as.numeric(scenario_num)]#%
batt.in=input$batt[as.numeric(scenario_num)]#%
#which customer growth rate (need to change later in app)
cust.in=ifelse(dnsp.in=="Energex",input$custqld[as.numeric(scenario_num)],
input$cust[as.numeric(scenario_num)]) #%
ogrid.in=input$ogrid[as.numeric(scenario_num)]#%
signal.in=input$signal[as.numeric(scenario_num)]#%
use.in=input$use[as.numeric(scenario_num)]#%
setwd("C:/R/shiny/dabase_app")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
iab.df = read.csv("./data/alliab.csv")
labels=names(iab.df)
labels[1:5]=c("dnsp","dnspname","assetclass","assetname", "type")
labels[6:length(labels)]=as.character(21:83)
names(iab.df)=labels
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
labels=c("hour","dnsp","dsnpname","19", "20","21")
names(pdprof.df)=labels
start_time <- Sys.time()
df.real=ptrm_fun(assets.df,other.df, iab.df,projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in)
scenario.in="medium"
dnsp.in="SAPN" #("Energex","SAPN")
projyearend.in = 60
age=c(50,55,60,65)
slim=c(2,5,10,15)
addnew=c(25,15,10,5)
product=c(-1,-0.1,0,1)
rba=c(3,3,3,3)
cars=c(50,60,75,90)
solar=c(50,50,50,50)
batt=c(5,5,5,5)
cust=c(1.4,1.4,1.4,1.4)
custqld=c(2.38,2.38,2.38,2.38)
ogrid=c(5,5,5,5)
signal=c(0,0,0,0)
use=c(-0.9,-0.9,-0.9,-0.9)
scenario=c(1,2,3,4)
scen.name=c("extreme","high","medium","low")
input=cbind.data.frame(scen.name,scenario,age,slim,addnew,product,rba,cars,solar,batt,
cust,custqld,ogrid,signal,use)
scenario_num=ifelse(scenario.in=="extreme",1,ifelse(scenario.in=="high",2,ifelse(scenario.in=="medium",3,4)))
age.in=input$age[as.numeric(scenario_num)]
retireslim.in=input$slim[as.numeric(scenario_num)] #%
addnew.in=input$addnew[as.numeric(scenario_num)] #%
productivity.in=input$product[as.numeric(scenario_num)] #%
rba.in=input$rba[as.numeric(scenario_num)] #%
cars.in=input$cars[as.numeric(scenario_num)]#%
solar.in=input$solar[as.numeric(scenario_num)]#%
batt.in=input$batt[as.numeric(scenario_num)]#%
#which customer growth rate (need to change later in app)
cust.in=ifelse(dnsp.in=="Energex",input$custqld[as.numeric(scenario_num)],
input$cust[as.numeric(scenario_num)]) #%
ogrid.in=input$ogrid[as.numeric(scenario_num)]#%
signal.in=input$signal[as.numeric(scenario_num)]#%
use.in=input$use[as.numeric(scenario_num)]#%
setwd("C:/R/shiny/dabase_app")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
iab.df = read.csv("./data/alliab.csv")
labels=names(iab.df)
labels[1:5]=c("dnsp","dnspname","assetclass","assetname", "type")
labels[6:length(labels)]=as.character(21:83)
names(iab.df)=labels
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
labels=c("hour","dnsp","dsnpname","19", "20","21")
names(pdprof.df)=labels
start_time <- Sys.time()
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, iab.df,projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in)
end_time <- Sys.time()
end_time - start_time
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in, cust.in)
library(devtools)
library(roxygen2)
setwd("C:/R/PTRM")
load_all("c://R/packages/ptrm",T)
library(ptrm)
library(ggplot2)
#dynamic inputs:
#normal run----
scenario.in="medium"
dnsp.in="SAPN" #("Energex","SAPN")
projyearend.in = 60
age=c(50,55,60,65)
slim=c(2,5,10,15)
addnew=c(25,15,10,5)
product=c(-1,-0.1,0,1)
rba=c(3,3,3,3)
cars=c(50,60,75,90)
solar=c(50,50,50,50)
batt=c(5,5,5,5)
cust=c(1.4,1.4,1.4,1.4)
custqld=c(2.38,2.38,2.38,2.38)
ogrid=c(5,5,5,5)
signal=c(0,0,0,0)
use=c(-0.9,-0.9,-0.9,-0.9)
scenario=c(1,2,3,4)
scen.name=c("extreme","high","medium","low")
input=cbind.data.frame(scen.name,scenario,age,slim,addnew,product,rba,cars,solar,batt,
cust,custqld,ogrid,signal,use)
scenario_num=ifelse(scenario.in=="extreme",1,ifelse(scenario.in=="high",2,ifelse(scenario.in=="medium",3,4)))
age.in=input$age[as.numeric(scenario_num)]
retireslim.in=input$slim[as.numeric(scenario_num)] #%
addnew.in=input$addnew[as.numeric(scenario_num)] #%
productivity.in=input$product[as.numeric(scenario_num)] #%
rba.in=input$rba[as.numeric(scenario_num)] #%
cars.in=input$cars[as.numeric(scenario_num)]#%
solar.in=input$solar[as.numeric(scenario_num)]#%
batt.in=input$batt[as.numeric(scenario_num)]#%
#which customer growth rate (need to change later in app)
cust.in=ifelse(dnsp.in=="Energex",input$custqld[as.numeric(scenario_num)],
input$cust[as.numeric(scenario_num)]) #%
ogrid.in=input$ogrid[as.numeric(scenario_num)]#%
signal.in=input$signal[as.numeric(scenario_num)]#%
use.in=input$use[as.numeric(scenario_num)]#%
setwd("C:/R/shiny/dabase_app")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
iab.df = read.csv("./data/alliab.csv")
labels=names(iab.df)
labels[1:5]=c("dnsp","dnspname","assetclass","assetname", "type")
labels[6:length(labels)]=as.character(21:83)
names(iab.df)=labels
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
labels=c("hour","dnsp","dsnpname","19", "20","21")
names(pdprof.df)=labels
start_time <- Sys.time()
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, iab.df,projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, rba.in)
end_time <- Sys.time()
end_time - start_time
#energex
#2.750999
#2.897142
#2.98501
#2.805846
sapn
#2.311411sec
#2.235457
library(microbenchmark)
#write.csv(df.real,"df_ptrm.csv")
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in, cust.in)
#run peak demand functions
View(pdprof.df)
yearslabel
#time line ----
projyearend = projyearend.in
startyearend=other.df$all.years[other.df$name=="year start"]
noyears=(projyearend-startyearend)
years=1:noyears
yearslabel=(startyearend:projyearend)
startyearend
startyearend=other.df$all.years[other.df$name=="year start"]
startyearend
#time line ----
projyearend = projyearend.in
d.name=c("Energex","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
dnsp=as.numeric(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
dnsp.label=as.character(dnsp.in)
other.df=other.df[other.df$dnsp==(as.numeric(dnsp)),]
other.df=subset(other.df,(!is.na(other.df$dnsp)))
pdprof.df=pdprof.df[pdprof.df$dnsp==(as.numeric(dnsp)),]
pdprof.df=subset(pdprof.df,(!is.na(pdprof.df$dnsp)))
#time line ----
projyearend = projyearend.in
startyearend=other.df$all.years[other.df$name=="year start"]
noyears=(projyearend-startyearend)
years=1:noyears
yearslabel=(startyearend:projyearend)
yearslabel=yearslabel[2:length(yearslabel)]
yearslabel
#step 1
#y1=
fy1=pdprof.df$`21`
fy1
energyvol.df$names
#  =G47*(1+(('SAPN load growth  '!F$5-'SAPN load growth  '!E$5)/'SAPN load growth  '!E$5))
#g47 year before for that hour
#sapn load growth f5 customer numbers (on grid) 2022
#sapn load growth e5 customer numbers (on grid) 2021
custnum=energyvol.df[energyvol.df$names]=="Customers on grid"
#  =G47*(1+(('SAPN load growth  '!F$5-'SAPN load growth  '!E$5)/'SAPN load growth  '!E$5))
#g47 year before for that hour
#sapn load growth f5 customer numbers (on grid) 2022
#sapn load growth e5 customer numbers (on grid) 2021
custnum=energyvol.df[energyvol.df$names=="Customers on grid"]
custnum
#  =G47*(1+(('SAPN load growth  '!F$5-'SAPN load growth  '!E$5)/'SAPN load growth  '!E$5))
#g47 year before for that hour
#sapn load growth f5 customer numbers (on grid) 2022
#sapn load growth e5 customer numbers (on grid) 2021
custnum=subset(energyvol.df,energyvol.df$names=="Customers on grid")
fy2=fy1[1]+(1+((custnum[2]-custnum[1])/custnum[1]))
fy2
custnum[2]
custnum[1]
fy1[1]
fy2=fy1[1]*(1+((custnum[2]-custnum[1])/custnum[1]))
fy2
#step 1
#y1=
fy21=pdprof.df$`21`
#  =G47*(1+(('SAPN load growth  '!F$5-'SAPN load growth  '!E$5)/'SAPN load growth  '!E$5))
#g47 year before for that hour
#sapn load growth f5 customer numbers (on grid) 2022
#sapn load growth e5 customer numbers (on grid) 2021
custnum=subset(energyvol.df,energyvol.df$names=="Customers on grid")
fy22=fy21[1]*(1+((custnum[2]-custnum[1])/custnum[1]))
#=H47*(1+(('SAPN load growth  '!G$5-'SAPN load growth  '!F$5)/'SAPN load growth  '!F$5))
fy23=fy22[1]*(1+((custnum[3]-custnum[2])/custnum[2]))
fy23
fy22=fy21*(1+((custnum[2]-custnum[1])/custnum[1]))
fy22
#step 1
#y1=
fy21=pdprof.df$`21`
fy21
#  =G47*(1+(('SAPN load growth  '!F$5-'SAPN load growth  '!E$5)/'SAPN load growth  '!E$5))
#g47 year before for that hour
#sapn load growth f5 customer numbers (on grid) 2022
#sapn load growth e5 customer numbers (on grid) 2021
custnum=subset(energyvol.df,energyvol.df$names=="Customers on grid")
fy22=fy21*(1+((custnum[2]-custnum[1])/custnum[1]))
fy22
fy21
fy21*(1+((custnum[2]-custnum[1])/custnum[1]))
fy21
(1+((custnum[2]-custnum[1])/custnum[1]))
custnum=as.numeric(custnum)
custnum
length(custnum)-1
#  =G47*(1+(('SAPN load growth  '!F$5-'SAPN load growth  '!E$5)/'SAPN load growth  '!E$5))
#g47 year before for that hour
#sapn load growth f5 customer numbers (on grid) 2022
#sapn load growth e5 customer numbers (on grid) 2021
custnum=subset(energyvol.df,energyvol.df$names=="Customers on grid")
custnum=as.numeric(custnum[1:length(custnum)-1])
custnum
fy22=fy21*(1+((custnum[2]-custnum[1])/custnum[1]))
fy22
#=H47*(1+(('SAPN load growth  '!G$5-'SAPN load growth  '!F$5)/'SAPN load growth  '!F$5))
fy23=fy22*(1+((custnum[3]-custnum[2])/custnum[2]))
#need an empty matrix for noyears*24
tmp <- matrix(NA, ncol=length(yearslabel), nrow=24)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
pdoff=tmp
pdoff[1]
pdoff[1]=pdprof.df$`21`
pdoff
for(i in 2:length(pdoff))
pdoff[i]=pdoff[i-1]*(1+((custnum[i]-custnum[i-1])/custnum[i-1]))
pdoff
pdoff[40]
pdoffgrid_fun=function(yearslabel,energyvol.df,pdprof.df){
fy21=pdprof.df$`21`
custnum=subset(energyvol.df,energyvol.df$names=="Customers on grid")
custnum=as.numeric(custnum[1:length(custnum)-1])
#need an empty matrix for noyears*24
tmp <- matrix(NA, ncol=length(yearslabel), nrow=24)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
pdoff=tmp
pdoff[1]=pdprof.df$`21`
for(i in 2:length(pdoff))
pdoff[i]=pdoff[i-1]*(1+((custnum[i]-custnum[i-1])/custnum[i-1]))
return(pdoff)
}
#step 2 and 3
pdoffgrid=pdoffgrid_fun(yearslabel,energyvol.df,pdprof.df){
data=rbind.data.frame(custongrid,energyvol,energypcustgrowthrate)
names=c("Customers on grid", "Energy volumes", "energypcustgrowthrate")
data$names=names
return(data)
}
#step 2 and 3
pdoffgrid=pdoffgrid_fun(yearslabel,energyvol.df,pdprof.df){
#step 2 and 3
pdoffgrid=pdoffgrid_fun(yearslabel,energyvol.df,pdprof.df)
pdoffgrid
use.in
use.in
yearslabel
pdoffgrid
#need an empty matrix for noyears*24
tmp <- matrix(NA, ncol=length(yearslabel), nrow=24)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
pd=tmp
for(i in 1:length(pd)){
#=G47*(1+'Dynamic variables'!$F$11)^('1a Model variables updated'!D$6-'1a Model variables updated'!$C$6)
pd[i]=pdoffgrid[i]*(1+(use.in/100))^(yearslabel[i+1]-yearslabel[i])
}
View(pd)
#need an empty matrix for noyears*24
tmp <- matrix(NA, ncol=length(yearslabel), nrow=24)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
pd=tmp
for(i in 1:length(pd)){
#=G47*(1+'Dynamic variables'!$F$11)^('1a Model variables updated'!D$6-'1a Model variables updated'!$C$6)
pd[i]=pdoffgrid[i]*(1+(use.in/100))^(yearslabel[i+1]-yearslabel[1])
}
View(pd)
length(pd)
length(yearslabel)+1
yearslabel[length(yearslabel)]+1
pd[length(pd)]=pdoffgrid[length(pd)]*(1+(use.in/100))^(yearslabel[length(yearslabel)]+1-yearslabel[1])
View(pd)
pdenergyeffic_fun=function(yearslabel,use.in,pdoffgrid){
#need an empty matrix for noyears*24
tmp <- matrix(NA, ncol=length(yearslabel), nrow=24)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
pd=tmp
for(i in 1:length(pd)){
#=G47*(1+'Dynamic variables'!$F$11)^('1a Model variables updated'!D$6-'1a Model variables updated'!$C$6)
pd[i]=pdoffgrid[i]*(1+(use.in/100))^(yearslabel[i+1]-yearslabel[1])
}
#fix the final column for final years +1
pd[length(pd)]=pdoffgrid[length(pd)]*(1+(use.in/100))^(yearslabel[length(yearslabel)]+1-yearslabel[1])
return(pd)
}
#step 4 #pd adjusted for energy efficiency
pdeeeffic=pdenergyeffic_fun(yearslabel,use.in,pdoffgrid)
pdeeeffic
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
load_all("./",T)
document()
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
load_all("c://R/packages/ptrm",T)
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
allenergyvol_fun=function(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in){
#cut to dnsp
d.name=c("Energex","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
dnsp=as.numeric(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
dnsp.label=as.character(dnsp.in)
other.df=other.df[other.df$dnsp==(as.numeric(dnsp)),]
other.df=subset(other.df,(!is.na(other.df$dnsp)))
#time line ----
projyearend = projyearend.in
startyearend=other.df$all.years[other.df$name=="year start"]
noyears=(projyearend-startyearend)
years=1:noyears
yearslabel=(startyearend:projyearend)
yearslabel=yearslabel[2:length(yearslabel)]
# customer number functions
#1
custnum=cust_fun(yearslabel,other.df,cust.in)
#2
poffgrid=poffgrid_fun(other.df,yearslabel,ogrid.in)
#3
custongrid=custnum*(1-poffgrid)
#4
epcust2020=other.df$all.years[other.df$name=="energy p cust 2020"]
loadaft_offgrid=custongrid*epcust2020
#5
loadaft_eeffic=loadafteff_fun(yearslabel,other.df,use.in,loadaft_offgrid)
#6
psolar=psolar_fun(other.df,yearslabel,solar.in)
#7
rloadsolar=rloadsolar_fun(yearslabel,other.df,custongrid,psolar)
#8
loadaft_solar=loadaft_eeffic-rloadsolar
#9
pbatt=pbatt_fun(other.df,yearslabel,batt.in)
#10
rloadbatt=rloadbatt_fun(yearslabel,other.df,custongrid,pbatt)
#11
loadaft_batt=loadaft_solar-rloadbatt
#12
carnum=cars_fun(yearslabel,other.df)
#13
evpenetration=carpenet_fun(yearslabel,cars.in,other.df)
#14
numberev=carnum*evpenetration
#15
evload=other.df$all.years[other.df$name=="ev load"]
loadinc_ev=numberev*evload
#16 (11+15)
loadaft_ev=loadinc_ev+loadaft_batt
#17
energyvol=loadaft_ev
#for price functions
tmp <- matrix(NA, ncol=length(yearslabel), nrow=1)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
energygrowthrate=tmp
energypcustgrowthrate=tmp
#energy growth rate
energygrowthrate[1]=0
for(i in 2:length(tmp))
energygrowthrate[i]= (energyvol[i]-energyvol[i-1])/energyvol[i-1]
#energy per customer (on grid)
energypcust=energyvol/custongrid
#energy per customer growth rate
energypcustgrowthrate[1]=0
for(i in 2:length(tmp))
energypcustgrowthrate[i]=(energypcust[i]-energypcust[i-1])/energypcust[i-1]
data=rbind.data.frame(custongrid,energyvol,energypcustgrowthrate,rloadsolar)
names=c("Customers on grid", "Energy volumes", "energypcustgrowthrate","rloadsolar")
data$names=names
return(data)
}
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
energyvol.df$names
#step 5-9 #pd adjusted for solar
#5
#% reduction to load from solar (vector across years)
rloadsolar=asnumeric(subset(energyvol.df,energyvol.df$names=="rloadsolar")
#='SAPN load growth  '!E16/'SAPN load growth  '!E11
# rloadsolar /energy volumes
data=rbind.data.frame(custongrid,energyvol,energypcustgrowthrate)
names=c("Customers on grid", "Energy volumes", "energypcustgrowthrate")
data$names=names
return(data)
}
#step 5-9 #pd adjusted for solar
#5
#% reduction to load from solar (vector across years)
rloadsolar=asnumeric(subset(energyvol.df,energyvol.df$names=="rloadsolar"))
#step 5-9 #pd adjusted for solar
#5
#% reduction to load from solar (vector across years)
rloadsolar=as.numeric(subset(energyvol.df,energyvol.df$names=="rloadsolar"))
#step 5-9 #pd adjusted for solar
#5
#% reduction to load from solar (vector across years)
rloadsolar=(subset(energyvol.df,energyvol.df$names=="rloadsolar"))
rloadsolar=as.numeric(rloadsolar[1:length(rloadsolar)-1])
rloadsolar
energyvol.df$names
evolumes=(subset(energyvol.df,energyvol.df$names=="Energy volumes"))
evolumes=as.numeric(evolumes[1:length(evolumes)-1])
evolumes
rloadsolar
#rloadsolarprop='SAPN load growth  '!E16/'SAPN load growth  '!E11
rloadsolarp=rloadsolar/evolumes
rloadsolarp
pdsolar
#step 4 #pd adjusted for energy efficiency
pdeeffic=pdenergyeffic_fun(yearslabel,use.in,pdoffgrid)
pdeeffic
#  sum of peak demand with energy effic (pdeeffic)
tot_eeffic=colSums(pdeeffic)
tot_eeffic
#prop reduction to solar in MW
solarmw=tot_eeffic*rloadsolarp
solarmw
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
setwd("C:/R/shiny/dabase_app")
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
labels
labels=c("hour","dnsp","dsnpname","19", "20","21","solar","battery")
names(pdprof.df)=labels
pdprof.df$solar
#step 7
solarconsum=pdprof.df$solar
solarconsum
