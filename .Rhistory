regdeprec_all=sumcapex
}
#View(fcnetavg.full)
#View(sumcapex)
#depreciation ----
#Excel Assets row 75, i.e. the sum of the iab + capex across all the asset categories for each year
deprec= colSums (regdeprec_all, na.rm = T,dims=1)
#real net capex ----
#assets row 10=real net capital expenditure =SUM(G11:G40) = real capex of all asset classes for each year
#G11=fcnetassets*(1+rvanilla01)^0.5 -  per asset class - so g11-g40 are all the 30 asset classes with this formula
#fcnetcapex.df[assetclass,capexstage]*(1+rvanilla[capexstage])^0.5
realcapexall=realcapex_fun(noyears,noassets,fcnetavg.full,rvanilla,yearslabel)
#real RAB (end period)----
#rRAB= prevyearRAB - deprec + realcapex = real residual RAB (end period) = assets! row 466
rRABend=rRABend_fun(noyears,RABstart,deprec,realcapexall,startyearend,projyearend)
#end period +1 because it starts with 2018-19, assets! row 466
#real residual RAB start period is the RAB from previous year
rRABstart=as.numeric(c(0,rRABend[1:(length(rRABend)-1)])) #assets row 467
label=(startyearend:projyearend)
df=as.data.frame(matrix(NA,ncol=length(label),nrow=1))
names(df)=label
df[1,]=rRABstart
rRABstart=df
#nominal RAB ----
#cif ----
cifyears=(1:(noyears+1)) #cumulative inflation index
cif.all=cif_fun(cifyears,infl, startyearend, projyearend) #includes 2019
cif.df=cif.all[2:length(cif.all)]
RABnom=rRABend*cif.all #nominal residual RAB (end period) assets row 474
#analysis row 17 is revenue building blocks RAB (start period) and is moved up one year
RABBBstart=as.numeric(c(0,RABnom[1:(length(RABnom)-1)])) #includin 2018-19
RABBBstart=RABBBstart[2:length(RABBBstart)] #starting at year ending 2020
label=((startyearend+1):projyearend)
df=as.data.frame(matrix(NA,ncol=length(label),nrow=1))
names(df)=label
df[1,]=RABBBstart
RABBBstart=df
#nominal vanilla WACC return on capital - from year ending 2020 onwards
nomequityreturn = (RABBBstart*propeqfund) * rateequity #Analysis row 25
nomdebtreturn = (RABBBstart*propdebtfund) * rdebt.df #analysis row 26
#1. return on capital ----
#total return on capital = nominal vanilla WACC starts at 2020
returnoncapital = nomequityreturn+nomdebtreturn #analysis row 23, also final revenue summary component 1
##reg depreciation  ----
#analysisG28=Assets!G$473=G472-G471 #nominal regulatory depreciation
#nom straight line depreciation - inflation opening rab
#G472=G75*G7 = real straight line deprec*cif.df
nomdeprec=(deprec*cif.df) #assets row 472 - 2019 value is zero
#inflation on open RAB ----
#assets row 471 : G471=F474*G6: nominal RABend (RABnom) from previous year (including 2018-19) *2.5%
prevRABnom=as.numeric(c(0,RABnom[2:length(RABnom)-1])) #including zero for 2018-19
RABoinfl=prevRABnom*infl
RABoinfl=RABoinfl[2:length(RABoinfl)]
label=((startyearend+1):projyearend)
df=as.data.frame(matrix(NA,ncol=length(label),nrow=1))
names(df)=label
df[1,]=RABoinfl
RABoinfl=df
#2. nominal reg depreciation ----
#revenue summary return of capital (but only from 2020 onwards)
#nominal regulatory depreciation row 473 also analysis row 28 (return on)
nomREGdeprec=nomdeprec-RABoinfl #from 2020
#inflated nominal residual RAB -----
#assets H475 Inflated Nominal Residual RAB (start period)=H$7*H467=rRABstart*cif
inflnomresRAB=rRABstart*cif.all #assets row 475
#operating expenditure ----
#Analysis row 30='PTRM input'!G187*cif.df (starting at 2020)
#= (controllable opex + debt raising costs[1:length(controlopex)])*cif.df
#controllable opex ----
controlopex= other.df[which(other.df$name=="Controllable Opex"),grep("^1$",colnames(other.df)):grep("^5$",colnames(other.df))] #just first 5 years 2020 to 2024
#opex debt raising costs
opexdrc=other.df[which(other.df$name=="Opex debt raising costs"),grep("^1$",colnames(other.df)):grep("^5$",colnames(other.df))] #just first 5 years 2020 to 2024
#opex ----
#function for projecting controllable opex across all years
controlopex.full=opex_fun(yearslabel, controlopex, productivity)
#debt raising costs----
#if using the average of ptrm years
#opexdrc.full=opexdrc_fun(yearslabel, opexdrc)
#using ptrm equation
#=(Drc*Dv*Assets!G475)/Assets!G7
Drc=other.df$all.years[other.df$name=="Debt Raising Costs"] #Drc = debt raising cost static input PTRM inputs G233
Dv = propdebtfund #proportion of debt funding =  0.6
#assets G475: Inflated Nominal Residual RAB (start period)
fcdebtraisecosts=(Drc*Dv*inflnomresRAB)/cif.all
fcdebtraisecosts=fcdebtraisecosts[2:length(fcdebtraisecosts)] ##PTRM input tab row 186, #forecast operating and maintenance expend debt raising costs
#3. opex ----
#x factor number 3
opex=(controlopex.full + fcdebtraisecosts[1:length(controlopex.full)])*cif.df[,1:length(controlopex.full)]
#4. Revenue adjustments ----
#='PTRM input'!G205*cif.df #analysis row 32
#'PTRM input'!G205=SUM(G191:G200)- sum of revenue adjustments static inputs DMIA,CESS and EBSS
revadjust.df=subset(other.df,other.df$type=="revadjust")
#revenue adjustments predictions ----
#extend to noyears by average column
start.col=grep("^1$", colnames(revadjust.df))
end.col=grep("^5$", colnames(revadjust.df))
name.col=grep("^name$", colnames(revadjust.df))
revadjustavg=revadjust.df[,c(name.col,start.col:end.col)]
#make year ending 2025 the average of previous values
revadjustavg$'6'=rowMeans(revadjustavg[,2:length(revadjustavg)])
#make 2025 remittal adjustments and shared assets =0
revadjustavg$'6'[grep("remittal adjust", revadjustavg$name)]=0
revadjustavg$'6'[grep("shared assets adjust", revadjustavg$name)]=0
#take out name column of revadjust
revadjustavg=revadjustavg[,2:length(revadjustavg)]
result <- matrix(NA, ncol=length(yearslabel-1), nrow=(nrow(revadjustavg)))
result=as.data.frame(result)
names(result)=yearslabel
revadjustyears=(1:length(revadjustavg))
result[, revadjustyears]=revadjustavg
#make all the other values the average
result[,(length(revadjustavg)+1):length(result)]=revadjustavg[length(revadjustavg)] #make the rest equal to the final year (2024)
revadjust.full=result
revadjust=colSums (revadjust.full, na.rm = T,dims=1)
revadjust=revadjust*cif.df[1:length(revadjust)]
# Net tax allowance -----
#=Analysis!G34+Analysis!G35 = Tax Payable + (Less) Value of Imputation Credits
#tax payable calculations----
#anlaysis excel tab
#taxpayable = G59=MAX(0,(G25+G26+G28+G30+G32+G40+G41-G50+F56)*G53/(1-(1-$D$35)*G53))
#g25=nomequityreturn
#make df
res <- matrix(NA, nrow=1, ncol=length(yearslabel))
res=as.data.frame(res)
names(res)=yearslabel
df=res
df[1,]=nomequityreturn
nomequityreturn=df
#g26=nomdebtreturn #already calc above
#g28=returncapitalregdeprec : return of capital (regulatory depreciation)
returncapitalregdeprec=nomREGdeprec[1:length(nomREGdeprec)] #assets 473 = RAB.df #from 2020 onwards
df=res
df[1,]=returncapitalregdeprec
returncapitalregdeprec=df
#g30=opex #already calc above
#G32=revadjust revenue adjustments #already calc above
#g40=customer contributions
#='PTRM input'!G139*Analysis!G$7 = sum of customer contributions each year * cif.df
fccustsum= colSums (fccust.full, na.rm = T,dims=1)
fccustindex=fccustsum*cif.df[1:length(fccustsum)]
#G41 = Deduct Non-Tax Income Revenue Adjustments - has to be negative
#=-'PTRM input'!G202*Analysis!G$7
#=SUMIF($R$191:$R$200,"No",G191:G200)*cif.df - only include in sum if it's a no
#add in tax income or expense notes from other.df
taxincome=other.df$taxinc[other.df$type=="revadjust"]
taxexp=other.df$taxexp[other.df$type=="revadjust"]
revadjust.full$taxincome=as.numeric(taxincome)
revadjust.full$taxexp=as.numeric(taxexp)
#g41=nontaxincome
nontaxincome=subset(revadjust.full,revadjust.full$taxincome==0)
nontaxincome=colSums(nontaxincome[,1:(length(nontaxincome)-2)])
nontaxincome=-(nontaxincome*cif.df[1:length(nontaxincome)])
#G50=SUM(G46:G49)= sum of opex (see above), Tax Depreciation, Interest, Tax expense revenue adjustments, Total Tax Expenses
# row 46 is assets row 479 = sum of taxiab + tax depreciation in each year for each asset (like year on year tracking depreciation above)
#taxiab check -----
#take out iab 1-10 as a new dataframe
col1=which(names(assets.df)=="taxiab1")
end1=which(names(assets.df)=="taxiab10")
taxiabcheck=(assets.df[col1:end1])
#
#tax iab ----
taxremlife=assets.df$taxremlife
taxoavalue=assets.df$openingtaxvalue
taxstdlife=assets.df$taxstdlife
#then add run tax yoy functions
taxsumcapex= taxyoyall_fun(noassets, yearslabel, noyears, taxremlife, taxoavalue,
startyearend,projyearend,taxstdlife,fcnetavg.full,fccust.full,cif.df,taxiabcheck)
#tax depreciation ----
#analysis row 47 and assets row 479 =taxdeprec
taxdeprec= colSums (taxsumcapex, na.rm = T,dims=1)
#placeholder adjustment----
result <- matrix(0, ncol=length(yearslabel-1), nrow=1)
result=as.data.frame(result)
names(result)=yearslabel
place=other.df[other.df$name=="placeholder adjustment",
(which(colnames(other.df)=="1"):which(colnames(other.df)=="10"))]
result[1:length(place)]=place
place=result
taxdeprec=taxdeprec+place
#interest ----
#analysis g48 and g26 =G10*G19 = interest = time varying return on debt *RABnom*0.6 (debt prop) - from 2020 onwards
interest= nomdebtreturn #rdebt.df*RABBBstart*0.6
#tax expense revenue adjustments----
#g49='PTRM input'!G203*cif.df = (SUMIF($S$191:$S$200,"Yes",G191:G200))*cif.df
#g49=taxexprevadj
taxexp.df=subset(revadjust.full,revadjust.full$taxexp==1)
taxexprevadj=colSums(taxexp.df[,1:(length(taxexp.df)-2)])
taxexprevadj=(taxexprevadj*cif.df[1:length(taxexprevadj)])
#g50=totaltaxexpense
totaltaxexpense=opex+taxdeprec+interest+taxexprevadj
#value of imputation credits----
#d35=imputationcredits (static value)
imputationcredits=other.df$all.years[other.df$name=="Value of Imputation Credits (gamma)"]
#corporate tax rate ----
#g53=corptaxrate
res <- matrix(NA, nrow=1, ncol=length(yearslabel))
res=as.data.frame(res)
names(res)=yearslabel
df=res
df[1,]=other.df$all.years[other.df$name=="Expected Corporate Tax Rate"]
corptaxrate=df
values=c("nomequityreturn","nomdebtreturn","returncapitalregdeprec","opex","revadjust",
"fccustindex","nontaxincome","totaltaxexpense","corptaxrate")
#join all into a dataframe to import into net tax allowance function
tax.df=rbind.data.frame(nomequityreturn,nomdebtreturn,returncapitalregdeprec,opex,revadjust,
fccustindex,nontaxincome,totaltaxexpense,corptaxrate)
tax.df[,as.character(startyearend)]=0
#reorder
tax.df = tax.df[c(length(tax.df),1:(length(tax.df)-1))]
tax.df$values=values
#tax loss carried forward ----
nettax.df=nettax_fun(yearslabel, startyearend, projyearend, other.df, tax.df)
#5. net tax allowance----
#revenue summary row 11
nettaxallowance=subset(nettax.df,nettax.df$value=="nettaxallowance")
nettaxallowance=nettaxallowance[2:(length(nettaxallowance)-1)]
#tax definitions ----
##excel reference from analysis tab
#all in: nettax.df$value and tax.df$value
#row 25=nomequityreturn
#row 26=nomdebtreturn
#row 28=returncapitalregdeprec
#row 30=opex
#row 32=revadjust
#row 34=immediatetax
#row 35=valueimputationcredits
#row 37=revenuesubtotal
#row 40=fccustindex
#row 41=nontaxincome
#row 43=revtaxassess
#row 46=opex (repeated in ptrm)
#row 47=taxdeprec
#row 48=interest
#row 49=taxexp
#row 50=totaltaxexpense
#row 53=corptaxrate
#row 54=taxableincome
#row 55=pretaxincome
#row 56=taxlosscarriedforward
#row 57=taxpayable
#row 59=immediatetax
#d35=imputationcredits
#END: annual revenue requirement ----
#nominal
A=returnoncapital
B=nomREGdeprec #return OF capital (depreciation)
C=opex
D=revadjust
E=nettaxallowance
annualrevenue=A+B+C+D+E
#real
Areal=returnoncapital/cif.df
Breal=nomREGdeprec/cif.df #return OF capital (depreciation)
Creal=opex/cif.df
Dreal=revadjust/cif.df
Ereal=nettaxallowance/cif.df
annualrevenue.real=annualrevenue/cif.df
plot(x=yearslabel, y=Areal, xlab='Year', col="red", ylim=c(30,2000))
points(x=yearslabel, y=Breal, col="blue")
points(x=yearslabel, y=Creal, col="green")
points(x=yearslabel, y=Dreal, col="black")
points(x=yearslabel, y=Ereal, col="orange")
points(x=yearslabel, y=annualrevenue.real, col="black", pch=2)
df=cbind.data.frame(annualrevenue.real,Areal,Breal,Creal,Dreal,Ereal)
df
annualrevenue.real
df=rbind.data.frame(annualrevenue.real,Areal,Breal,Creal,Dreal,Ereal)
df
library(ggplot2)
df=t(df)
df
startyearend:projyearend
df$year=startyearend:projyearend
year=startyearend:projyearend
year
df$year=year
df$year
names(df)
df=rbind.data.frame(annualrevenue.real,Areal,Breal,Creal,Dreal,Ereal)
df=as.data.frame(t(df))
names(df)
df
df=cbind.data.frame(annualrevenue.real,Areal,Breal,Creal,Dreal,Ereal)
df
cbind.data.frame(A,B)
df=rbind.data.frame(annualrevenue.real,Areal,Breal,Creal,Dreal,Ereal)
df=as.data.frame(t(df))
names(df)=("cannualrevenue.real","Areal","Breal","Creal","Dreal","Ereal")
df=rbind.data.frame(annualrevenue.real,Areal,Breal,Creal,Dreal,Ereal)
df=as.data.frame(t(df))
year=startyearend:projyearend
df$year=year
names(df)
df$year=year
View(df)
year
year=(startyearend+1):projyearend
year
df$year=year
names(df)
names(df)=c("cannualrevenue.real","Areal","Breal","Creal","Dreal","Ereal","year")
names(df)=c("Rev.real","A.real","B.real","C.real","D.real","E.real","Year")
ggplot(df,aes(year,Rev.real))+geom_point()
ggplot(df,aes(year,Rev.real))+geom_point(col="red")
ggplot(df,aes(year,Rev.real))+geom_point(col="red")+geom_point(aes(year,A.real),col="blue")
ggplot(df,aes(year,Rev.real))+geom_point(col="red")+geom_point(aes(year,A.real),col="blue")+geom_smooth(method="lm")
ggplot(df,aes(year,Rev.real))+geom_point(col="red")+geom_point(aes(year,A.real),col="blue")+
theme_bw()
ggplot(df,aes(year,Rev.real))+geom_smooth(col="red")+geom_point(aes(year,A.real),col="blue")+
theme_bw()
ggplot(df,aes(year,Rev.real))+geom_point(col="red")+geom_smooth(col="red")+geom_point(aes(year,A.real),col="blue")+
theme_bw()
revdf=t(annualrevenue.real)
revdf
revdf=cbind.data.frame(year,revdf)
revdf
revdf=cbind.data.frame(year,revdf,"revenue")
revdf
revdf=t(annualrevenue.real)
revdf=cbind.data.frame(year,revdf,"Revenue.real")
retdf=t(Areal)
retdf=cbind.data.frame(year,revdf,"Return on (real)")
depdf=t(Breal)
depdf=cbind.data.frame(year,revdf,"Reg. deprec. (real)")
opdf=t(Creal)
opdf=cbind.data.frame(year,revdf,"Opex (real)")
revadf=t(Dreal)
revadf=cbind.data.frame(year,revdf,"Adj. revenue (real)")
taxdf=t(Ereal)
taxdf=cbind.data.frame(year,revdf,"Tax (real)")
anrevdf=t(annualrevenue.real)
anrevdf=cbind.data.frame(year,revdf,"Revenue.real")
anrevdf
anrevdf=t(annualrevenue.real)
anrevdf=cbind.data.frame(year,revdf,"Revenue.real")
anrevdf
annualrevenue.real
anrevdf=t(annualrevenue.real)
anrevdf=cbind.data.frame(year,anrevdf,"Revenue.real")
merge.data.frame(retdf,depdf, by = "year")
anrevdf
retdf=t(Areal)
retdf=cbind.data.frame(year,retdf,"Return on (real)")
names(retdf)=c("year","cost","type")
depdf=t(Breal)
depdf=cbind.data.frame(year, depdf,"Reg. deprec. (real)")
names(depdf)=c("year","cost","type")
opdf=t(Creal)
opdf=cbind.data.frame(year,opdf,"Opex (real)")
names(opdf)=c("year","cost","type")
revadf=t(Dreal)
revadf=cbind.data.frame(year,revadf,"Adj. revenue (real)")
names(revadf)=c("year","cost","type")
taxdf=t(Ereal)
taxdf=cbind.data.frame(year,taxdf,"Tax (real)")
names(taxdf)=c("year","cost","type")
anrevdf=t(annualrevenue.real)
anrevdf=cbind.data.frame(year, anrevdf,"Revenue.real")
names(anrevdf)=c("year","cost","type")
rbind.data.frame(retdf,depdf,opdf,revadf,taxdf,anrevdf)
df=rbind.data.frame(retdf,depdf,opdf,revadf,taxdf,anrevdf)
names(df)
ggplot(df,aes(year,type),col=type)+geom_point()+geom_smooth()
ggplot(df,aes(year,cost),col=type)+geom_point()+geom_smooth()
ggplot(df,aes(year,cost))+geom_point(col=type)
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme_bw()
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme_blank()
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme_bw()
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme_bw()+theme(axis.line = element_line(colour = "black"),panel.background = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme(axis.line = element_line(colour = "black"),panel.background = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme(axis.line = element_line(colour = "black"),panel.background = element_blank(), panel.grid.minor = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme(axis.line = element_line(colour = "black"),panel.background = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme(axis.line = element_line(colour = "black"),panel.grid.major = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+
theme(axis.line = element_line(colour = "black"),panel.background = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()
projyearend.in = 101
age.in=64.5
retireslim.in=5 #%
addnew.in=0 #%
productivity.in=1 #%
method=2 #1=warl, 2=yearonyear
dnsp=2 #(1: ausgrid, 2: sa)
library(devtools)
library(roxygen2)
setwd("C:/R/PTRM")
load_all("c://R/packages/ptrm",T)
source("PTRMw_package_190418.R",keep.source = F,local = TRUE)
#END: annual revenue requirement ----
#A=returnoncapital
#B=nomREGdeprec #return OF capital (depreciation)
#C=opex
#D=revadjust
#E=nettaxallowance
library(ggplot2)
df=rbind.data.frame(annualrevenue.real,Areal,Breal,Creal,Dreal,Ereal)
df=as.data.frame(t(df))
year=(startyearend+1):projyearend
df$year=year
names(df)=c("Rev.real","A.real","B.real","C.real","D.real","E.real","Year")
#Areal=returnoncapital/cif.df
#Breal=nomREGdeprec/cif.df #return OF capital (depreciation)
#Creal=opex/cif.df
#Dreal=revadjust/cif.df
#Ereal=nettaxallowance/cif.df
retdf=t(Areal)
retdf=cbind.data.frame(year,retdf,"Return on (real)")
names(retdf)=c("year","cost","type")
depdf=t(Breal)
depdf=cbind.data.frame(year, depdf,"Reg. deprec. (real)")
names(depdf)=c("year","cost","type")
opdf=t(Creal)
opdf=cbind.data.frame(year,opdf,"Opex (real)")
names(opdf)=c("year","cost","type")
revadf=t(Dreal)
revadf=cbind.data.frame(year,revadf,"Adj. revenue (real)")
names(revadf)=c("year","cost","type")
taxdf=t(Ereal)
taxdf=cbind.data.frame(year,taxdf,"Tax (real)")
names(taxdf)=c("year","cost","type")
anrevdf=t(annualrevenue.real)
anrevdf=cbind.data.frame(year, anrevdf,"Revenue.real")
names(anrevdf)=c("year","cost","type")
df=rbind.data.frame(retdf,depdf,opdf,revadf,taxdf,anrevdf)
names(df)
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()
revadf
ggplot(df,aes(x=year,y=cost, color=type),ylab="Price ($m)")+geom_point()+theme_bw()
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()+ylab("Price ($m)")
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()+ylab("Price ($m)")+xlab("Year")+
legend_title("Building block")
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()+ylab("Price ($m)")+xlab("Year")+
theme(legend.title = "Building block")
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()+ylab("Price ($m)")+xlab("Year")+
theme(legend.title = "Building block")
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()+ylab("Price ($m)")+xlab("Year")+
theme(legend.title =element_text("Building block"))
ggplot(df,aes(x=year,y=cost, color=type))+geom_point()+theme_bw()+ylab("Price ($m)")+xlab("Year")+
theme(legend.title =element_blank())
View(df)
shiny::runApp('C:/R/shiny/DA_testapp')
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
load_all("c://R/packages/ptrm",T)
#check package
check()
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
load_all("c://R/packages/ptrm",T)
#check package
check()
#document and check package
#set working dir to package dir
setwd("c://R/packages/ptrm")
document()
load_all("c://R/packages/ptrm",T)
#check package
check()
install_github("estalenberg/ptrm")
library(ptrm)
runApp('C:/R/shiny/DA_testapp')
d.name=c("Ausgrid","SAPN")
d.code=1:2
d.code
dnsp.df=cbind.data.frame(d.code,d.name)
dnsp.df
dnsp.in="SAPN"
d.name=c("Ausgrid","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
#choices = c("SAPN","Ausgrid"),
dnsp.df$d.code[dsnp.df$name==dnsp.in]
#choices = c("SAPN","Ausgrid"),
dnsp.df$d.code[dnsp.df$name==dnsp.in]
dnsp.in
dnsp.df$name
dnsp.df$d.name
#choices = c("SAPN","Ausgrid"),
as.numberic(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
#choices = c("SAPN","Ausgrid"),
as.numeric(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
#create dataframe to link dnsp name with dnsp number
d.name=c("Ausgrid","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
dnsp=as.numeric(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
dnsp
dnsp=2 #(1: ausgrid, 2: sa)
dnsp
runApp('C:/R/shiny/DA_testapp')
