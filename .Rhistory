#price plots----
#b: price per customer (both small business and residential)
price_res=as.numeric(t(subset(price.df,price.df$names=="resnetprice")))
price_bus=as.numeric(t(subset(price.df,price.df$names=="busnetprice")))
price_restou=as.numeric(t(subset(price.df,price.df$names=="resnetpricetou")))
price_bustou=as.numeric(t(subset(price.df,price.df$names=="busnetpricetou")))
yearlabel=as.numeric(colnames(price.df[1:length(price.df)]))
d1=cbind.data.frame(yearlabel,price_res)
names(d1)=c("yearlabel","price")
d1$fullname="Residential (non TOU)"
d1$type="Residential"
d1$tou="non TOU"
d2=cbind.data.frame(yearlabel,price_bus)
names(d2)=c("yearlabel","price")
d2$fullname="Small business (non TOU)"
d2$type="Small business"
d2$tou="non TOU"
d3=cbind.data.frame(yearlabel,price_restou)
names(d3)=c("yearlabel","price")
d3$fullname="Residential (TOU)"
d3$type="Residential"
d3$tou="TOU"
d4=cbind.data.frame(yearlabel,price_bustou)
names(d4)=c("yearlabel","price")
d4$fullname="Small business (TOU)"
d4$type="Small business"
d4$tou="TOU"
data=rbind.data.frame(d1,d2,d3,d4)
data=data[1:(length(yearlabel)*4)-1,]
data$fullname=as.factor(data$fullname)
data$type=as.factor(data$type)
data$tou=as.factor(data$tou)
b=ggplot(data,aes(x=yearlabel,y=price,group=fullname)) +
geom_line(size=1,aes(linetype = tou, color = type))+
theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Price per customer (real terms)")+
ylab("Price ($m)")+xlab("Year")+
scale_color_manual(values=c("#fc8d59","#02818a"))
#c: price per energy unit (both small business and residential)
price_ures=as.numeric(t(subset(price.df,price.df$names=="res_ckwh")))
price_ubus=as.numeric(t(subset(price.df,price.df$names=="bus_ckwh")))
price_urestou=as.numeric(t(subset(price.df,price.df$names=="res_ckwhtou")))
price_ubustou=as.numeric(t(subset(price.df,price.df$names=="bus_ckwhtou")))
yearlabel=as.numeric(colnames(price.df[1:length(price.df)]))
d1=cbind.data.frame(yearlabel,price_ures)
names(d1)=c("yearlabel","price")
d1$fullname="Residential (non TOU)"
d1$type="Residential"
d1$tou="non TOU"
d2=cbind.data.frame(yearlabel,price_ubus)
names(d2)=c("yearlabel","price")
d2$fullname="Small business (non TOU)"
d2$type="Small business"
d2$tou="non TOU"
d3=cbind.data.frame(yearlabel,price_urestou)
names(d3)=c("yearlabel","price")
d3$fullname="Residential (TOU)"
d3$type="Residential"
d3$tou="TOU"
d4=cbind.data.frame(yearlabel,price_ubustou)
names(d4)=c("yearlabel","price")
d4$fullname="Small business (TOU)"
d4$type="Small business"
d4$tou="TOU"
udata=rbind.data.frame(d1,d2,d3,d4)
udata=udata[1:(length(yearlabel)*4)-1,]
udata$fullname=as.factor(udata$fullname)
udata$type=as.factor(udata$type)
udata$tou=as.factor(udata$tou)
c=ggplot(udata,aes(x=yearlabel,y=price,group=fullname)) +
geom_line(size=1,aes(linetype = tou, color = type))+
theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Price per energy unit (c/kWh, real terms)")+
ylab("Price ($m)")+xlab("Year")+
scale_color_manual(values=c("#fc8d59","#02818a"))
#building block plots ----
#d: real capex
#e: real opex
#f: nominal WACC
d=ggplot(df.real,aes(x=year,y=df.real$realcapex)) +geom_line(size=1)+theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Capex (real)")+
ylab("Price ($m)")+xlab("Year")+ scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0, 0))
df.opex=subset(df.real,df.real$type=="Opex (real)")
e=ggplot(df.opex,aes(x=year,y=cost)) +geom_path(size=1)+theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Opex (real terms)")+
ylab("Price ($m)")+xlab("Year")#+ scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0, 0))
#nominal WACC is the return on (first component of revenue)
df.wacc=subset(df.real,df.real$type=="Return on capital (real)")
f=ggplot(df.wacc,aes(x=year,y=cost)) +geom_path(size=1)+theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Nominal WACC (return on capital)")+
ylab("Price ($m)")+xlab("Year")#+ scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0, 0))
#row 4
#g: real RAB
g=ggplot(df.real,aes(x=year,y=df.real$realrab)) +geom_line(size=1)+theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("RAB (real)")+
ylab("Price ($m)")+xlab("Year")+ scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0, 0))
#energy numbers and volumes plots----
#h: customer numbers
#i: energy volumes (label it energy sales)
cust_num=(as.numeric(t(subset(energyvol.df,energyvol.df$names=="custnum")))/1000000)
energy_vol=(as.numeric(t(subset(energyvol.df,energyvol.df$names=="energyvoltot")))/1000)
yearlabel=as.numeric(colnames(energyvol.df[1:length(energyvol.df)]))
edata=cbind.data.frame(yearlabel,cust_num,energy_vol)
edata=edata[1:(length(yearlabel))-1,]
h=ggplot(edata,aes(x=yearlabel,y=edata$cust_num)) +geom_line(size=1)+theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Customer numbers (m)")+
ylab("Numbers")+xlab("Year")+ scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0, 0))
i=ggplot(edata,aes(x=yearlabel,y=edata$energy_vol)) +geom_line(size=1)+theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Energy sales")+
ylab("Sales (1000 GWh)")+xlab("Year")+ scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0, 0))
fourth_row <- plot_grid(g, h, i,  align = 'h', ncol=3,rel_widths = c(1, 1,1))
third_row <- plot_grid(d ,e , f,  ncol=3,align = 'h', rel_widths = c(1, 1))
second_row <- plot_grid(b ,c , ncol=2, align = 'h', rel_widths = c(1, 1))
plot_grid(a,second_row,third_row, fourth_row,  ncol = 1, rel_heights = c(2, 1,1,1))
#call function from package # no need to subset for
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
#call energy volumes with electric cars #subsets dnsp inside function
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,projyearend.in)
#rev_pcust=subset(price.df,price.df$names=="rev_pcust")
rev_pGWh=subset(price.df,price.df$names=="rev_pGWh")
#pchange2160_pcust=((rev_pcust[40]-rev_pcust[1])/rev_pcust[1])*100
#mapping variable:
pchange2160_pGWh=((rev_pGWh[40]-rev_pGWh[1])/rev_pGWh[1])*100
saeq=as.numeric(round(pchange2160_pGWh,digits=1))
auseq=-30+saeq
price=c(auseq,NA,NA,NA,NA,NA,NA,saeq,NA,NA,NA,NA,NA,NA)
name=c("ausgrid"  , "essential", "evoenergy" ,"endeavour" ,"energex",   "ergon", "pandw","sapn","tasnet","ausnet",
"citipower", "powercor","united","jemena")
name.lab=c("Ausgrid"  , "Essential Energy", "Evoenergy" ,"Endeavour Energy" ,"Energex", "Ergon Energy",
"Power and Water","SAPN","Tasnet","Ausnet",
"Citipower", "Powercor","United Energy","Jemena")
labels=paste(as.numeric(price),"%")
labels=gsub(" ", "", labels, fixed = TRUE)
data <- cbind.data.frame(price,labels,name, name.lab)
model.plot=merge(alldnsp, data, by="name", all.x=TRUE)
bins <- c((seq(-200,0,by=50)),0.5,(seq(50,200,by=50)))
pal <- colorBin("Spectral", domain = model.plot$price, bins = bins,reverse = T)
labels <- sprintf(
"<strong>%s</strong><br/>%g <span>&#37;</span>increase",
model.plot$name.lab, model.plot$price
) %>% lapply(htmltools::HTML)
m= leaflet('map') %>%
setView(150, -30, 4) %>%
addTiles()
m=  m %>%
addPolygons(data = model.plot, fillColor = ~pal(model.plot$price),
popup = paste0("<strong>DSNP: </strong>",
model.plot$name.lab,
"<br><strong> Price increase: </strong>",
model.plot$price,"<br><strong> <span>&#37;</span> per GWh </strong>"),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>%  addLegend(data=model.plot, position="bottomright", pal = pal, values = ~model.plot$price,
title = "Percent change in price",
labFormat = labelFormat(prefix = "%"),
opacity = 1)
runApp()
ggplot(edata,aes(x=yearlabel,y=edata$cust_num)) +geom_line(size=1)+theme_classic(base_size=15)+
theme(legend.title =element_blank())+
ggtitle("Customer numbers")+
ylab("Numbers (m)")+xlab("Year")+ scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0, 0),lim=c(0,35))
runApp()
runApp()
runApp()
shiny::runApp('C:/R/shiny/DA_testapp')
#libraries----
#shiny libraries
library(shiny)
library(RColorBrewer) #for map colours
library(shinyjs)
library(shinythemes)
#mapping libraries
library(sp)  # classes for spatial data
library(dismo) #need this to load map
library(rgdal) #loading polygon shapefile
library(RColorBrewer) #for map colours
library(leaflet)
#graphing libraries
library(ggplot2)
#library(gridExtra)
library(cowplot)
#ptrm package library
library(devtools)
#install_github("estalenberg/ptrm")
library(ptrm)
projyearend.in = 60
age.in=64.5
retireslim.in=10 #%
addnew.in=10 #%
productivity.in=0 #%
dynamicincdebt.in=2 #%
cars.in=100#%
method=2 #1=warl, 2=yearonyear
dnsp.in=as.character("SAPN") #(1: ausgrid, 2: sa)
setwd("C:/R/shiny/DA_testapp")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
# import data ----
#setwd("C:/R/shiny/DA_testapp")
alldnsp=readRDS("./data/alldnsp.rds")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
age.in=65
#dynamic inputs----
projyearend.in=2060-2000
#create dataframe to link dnsp name with dnsp number
d.name=c("Ausgrid","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
dnsp=as.numeric(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
dnsp.label=as.character(dnsp.in)
assets.df=assets.df[assets.df$dnsp==(as.numeric(dnsp)),]
assets.df=subset(assets.df,(!is.na(assets.df$dnsp)))
other.df=other.df[other.df$dnsp==(as.numeric(dnsp)),]
other.df=subset(other.df,(!is.na(other.df$dnsp)))
noassets=as.numeric(nrow(assets.df))
assetclasslist=1:noassets
assetcode=assets.df$assetcode
#time line ----
projyearend = projyearend.in
startyearend=other.df$all.years[other.df$name=="year start"]
startyearend
noyears=(projyearend-startyearend)
years=1:noyears
yearslabel=(startyearend:projyearend)
yearslabel
yearslabel=yearslabel[2:length(yearslabel)]
age=rep(age.in,noyears)
retireslim=rep(retireslim.in/100,noyears)
addnew=rep(addnew.in/100,noyears)
productivity=rep(productivity.in/100,noyears)
dynamicincdebt=dynamicincdebt.in/100
#no scientific notation
options(scipen=999999)
tmp <- matrix(NA, ncol=length(yearslabel), nrow=1)
runApp()
projyearend.in = 60
age.in=65
retireslim.in=10 #%
addnew.in=10 #%
productivity.in=0 #%
dynamicincdebt.in=2 #%
cars.in=100#%
method=2 #1=warl, 2=yearonyear
dnsp.in=as.character("SAPN") #(1: ausgrid, 2: sa)
runApp()
setwd("C:/R/shiny/DA_testapp")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
runApp()
#create dataframe to link dnsp name with dnsp number
d.name=c("Ausgrid","SAPN")
d.code=1:2
dnsp.df=cbind.data.frame(d.code,d.name)
dnsp=as.numeric(dnsp.df$d.code[dnsp.df$d.name==dnsp.in])
dnsp.label=as.character(dnsp.in)
assets.df=assets.df[assets.df$dnsp==(as.numeric(dnsp)),]
assets.df=subset(assets.df,(!is.na(assets.df$dnsp)))
other.df=other.df[other.df$dnsp==(as.numeric(dnsp)),]
other.df=subset(other.df,(!is.na(other.df$dnsp)))
noassets=as.numeric(nrow(assets.df))
assetclasslist=1:noassets
assetcode=assets.df$assetcode
runApp()
#time line ----
projyearend = projyearend.in
startyearend=other.df$all.years[other.df$name=="year start"]
noyears=(projyearend-startyearend)
years=1:noyears
yearslabel=(startyearend:projyearend)
yearslabel=yearslabel[2:length(yearslabel)]
runApp()
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
runApp()
#call energy volumes with electric cars #subsets dnsp inside function
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
load_all("./",T)
document()
load_all("c://R/packages/ptrm",T)
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
yoyall_fun()
yoyall_fun
projyearend.in = 60
age.in=65
retireslim.in=10 #%
addnew.in=10 #%
productivity.in=0 #%
dynamicincdebt.in=2 #%
cars.in=100#%
method=2 #1=warl, 2=yearonyear
dnsp.in=as.character("SAPN") #(1: ausgrid, 2: sa)
setwd("C:/R/shiny/DA_testapp")
#load data
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, projyearend.in, age.in, retireslim.in,addnew.in,
productivity.in,dnsp.in, method, dynamicincdebt.in)
#??ptrm
#call energy volumes with electric cars
energyvol.df=allenergyvol_fun(dnsp.in,other.df,cars.in,projyearend.in)
runApp()
shiny::runApp('C:/R/shiny/DA_testapp')
runApp('C:/R/shiny/DA_app')
rsconnect::setAccountInfo(name='dynamicanalysis',
token='389B2ACC9D9B24E08ADDC8B856003F36',
secret='8z43PMnu4OE+q3jK2gegm8k0nvd8vbyZMq7rLkgf')
deployApp('C:/R/shiny/daleaflet_app', account='dynamicanalysis')
library(rsconnect)
deployApp('C:/R/shiny/daleaflet_app', account='dynamicanalysis')
library(rgdal) #loading polygon shapefile
library(spdplyr)
library(geojsonio)
library(rmapshaper)
library(sp)  # classes for spatial data
library(raster)  # grids, rasters
library(rasterVis)  # raster visualisation
library(maptools)
library(rgeos)
library(dismo)
library(rgdal)
library(gtools)
library(rworldmap)
library(colorRamps)
#leaflet ----
#plotting with leaflet
#read shapefile
alldnsp<-readOGR(dsn = "c:/R/PTRM/mapping",layer =  "alldnsp")
alldnsp$name
alldnsp <- alldnsp %>% rename(name = dnsp)
alldnsp$name
#load geotiff
aus <- raster(x = "C:\R\PTRM\mapping\mapping.0.tif")
#load geotiff
aus <- raster(x = "C:/R/PTRM/mapping/mapping.0.tif")
crs(aus)
plot(aus)
plot(alldnsp)
plot(aus)
plot(alldnsp,add=T)
plot(alldnsp)
plot(aus,add=T)
plot(alldnsp, add=T)
install.packages("lubridate")
install.packages("ggplot2")
install.packages("data.table")
install.packages("ggplot2")
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
install.packages("ggmap")
library(ggmap)
ggmap::register_google(key = "AIzaSyAm-O8m66AKTkfmE66NHu29x6QmA2Y0dBc")
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p
??ggmap
g = gmap('Australia')
library(dismo)
g = gmap('Australia')
gmap('Australia')
x = runif(30)*10 + 40
y = runif(30)*10 - 20
xy = cbind(x, y)
g = gmap(xy, type='hybrid')
map <- get_map(location = 'Australia', zoom = 4)
ggmap::register_google(key = "AIzaSyAm-O8m66AKTkfmE66NHu29x6QmA2Y0dBc")
map <- get_map(location = 'Australia', zoom = 4)
ggmap::register_google(key = "AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
map <- get_map(location = 'Australia', zoom = 4)
?get_map
map <- get_map(location = 'Australia', zoom = 4,key="AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
map <- get_map(c(-97.14667, 31.5493),key="AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
get_map(c(-97.14667, 31.5493),key="AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
ggmap(c(-97.14667, 31.5493),key="AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
map<-get_map(c(-97.14667, 31.5493),key="AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
ggmap(map)
map<-get_map(c(-97.14667, 31.5493))
ggmap(map)
ggmap::register_google(key = "AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
map<-get_map(c(-97.14667, 31.5493))
ggmap(map)
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
map<-get_map(location="Australia")
map<-get_map(c(-122.335167, 47.608013))
ggmap(map)
map<-get_map(c(-122.335167, 47.608013))
ggmap(map)
map<-get_map(c(-122.335167, 47.608013))
ggmap(map)
map<-get_map(c(-122.335167, 47.608013))
ggmap(map)
ggmap::register_google(key = "AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
map<-get_map(c(-122.335167, 47.608013))
ggmap(map)
map<-get_map(c(-122.335167, 47.608013))
ggmap::register_google(key = "AIzaSyDQaXYeWXMgNRBaxYc1TJlba9q2s-U9cNc")
map<-get_map(c(-122.335167, 47.608013))
ggmap(map)
map<-get_map(c(-97.14667, 31.5493))
ggmap(map)
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p
library(ggmap)
install.packages("googleAuthR")
library(sp)  # classes for spatial data
library(raster)  # grids, rasters
library(rasterVis)  # raster visualisation
library(maptools)
library(rgeos)
library(dismo)
library(rgdal)
library(gtools)
library(rworldmap)
library(colorRamps)
#mymap <- gmap("Madagascar", exp = 0.9)  #type = "satellite" #choose whatever country
#plot(mymap)
#save in dir
#mymap <- gmap("Madagascar", exp = 0.7, filename = "Mada.gmap")
#mymap <- gmap("Madagascar")
#plot(mymap)
newmap <- getMap(resolution = "coarse")  # different resolutions available
#mymap <- gmap("Madagascar", exp = 0.9)  #type = "satellite" #choose whatever country
#plot(mymap)
#save in dir
#mymap <- gmap("Madagascar", exp = 0.7, filename = "Mada.gmap")
#mymap <- gmap("Madagascar")
#plot(mymap)
newmap <- getMap(resolution = "coarse")  # different resolutions available
#names(newmap)
mask <- subset(newmap, newmap$SOVEREIGNT == "Madagascar",  filename = "Mada.gmap")
plot(mask)
#names(newmap)
mask <- subset(newmap, newmap$SOVEREIGNT == "Australia",  filename = "Aus.gmap")
plot(mask)
#names(newmap)
mask <- subset(newmap, newmap$SOVEREIGNT == c("Australia","New Zealand"),  filename = "Aus.gmap")
plot(mask)
#names(newmap)
mask <- subset(newmap, newmap$SOVEREIGNT == c("Australia"),  filename = "Aus.gmap")
plot(mask)
