#rateequity=other.df$all.years[other.df$name=="Return on Equity"] #static value
#rate equity return varying by new formula:
requity.df=requity_fun(other.df,yearslabel,rba) #time vector
rateequity=requity.df
#return on debt ----
# trailing average portfolio return on debt function
rdebt.df=rdebt_fun(other.df,yearslabel,rba)
#PTRM excel macros ----
#asset remaining life
#A1remlife = A1 = PTRM input! asset class 1, rem life = remaining life
#so A1remlife is remlife[1]
remlife=assets.df$remaininglife
#opening asset value
oavalue = assets.df$openingassetvalue
#asset standard life
stdlife = assets.df$standardlife #now convert 0 standard life to na for capex formula (cause it divides by zero and the capex inputs treat na's as zeros)
stdlife[which(stdlife==0)]=NA
#real vanilla WACC ----
#rvanilla01 = real vanilla !WACC = G8*G11+G9*G15
#rvanilla=propeqfund*raterealequityreturn + propdebtfund*raterealdebtreturn
#real rate of equity funding
#WACC rows:
#G8 = propeqfund #Proportion of Equity Funding
#G11 Post-tax Real Return on Equity	= raterealequityreturn = (1+G10)/(1+G6)-1
#G10 = rateequity = Post-tax Nominal Return on Equity (constant)
#G6 = infl = Inflation rate
raterealequityreturn=(1+rateequity)/(1+infl)-1 #static value
#real rate of debt return
#G9 = propdebtfun = Proportion of Debt Funding
#G15 =  Real Pre-tax Return on Debt =(1+G14)/(1+G6)-1 = rate real debt return
#G14 = rdebt.df[1:10] = Nominal Pre-tax Return on Debt 	(Varying)	#nominal means inflation is taken into account
#=IF(OR(ISBLANK('PTRM input'!K222),'PTRM input'!K222=0),J14,'PTRM input'!K222) #this means that if the input of the nominal pre-tax return on debt is blank or zero, make it the final prediction (in this case 0.0503)
#G6 = infl = Inflation rate
raterealdebtreturn=((1+rdebt.df)/(1+infl)-1) #real is where impact of inflation is removed
#real vanilla WACC vector - WACC row 19
rvanilla=(propeqfund*raterealequityreturn)+(propdebtfund*raterealdebtreturn)
#net capex ----
#replace na for 0 - na results in an error and ptrm treats na for zero in capex
baseR.na   <- function(x) { x[is.na(x)] <- 0; x }
assets.orig=assets.df
assets.df=baseR.na(assets.orig[,(which(colnames(assets.orig)=="fccustcontrib1")):length(assets.orig)]) #from column 10 (start of capex inputs) change na's to zeros
assets.df=cbind.data.frame(assets.orig[,1:(which(colnames(assets.orig)=="taxstdlife"))],assets.df)
#net capex from dnsp input
col1=which(names(assets.df)=="fcnetcapex1")
end1=which(names(assets.df)=="fcnetcapex5")
fcnetcapex=(assets.df[col1:end1])
#customer contributions
col1=which(names(assets.df)=="fccustcontrib1")
end1=which(names(assets.df)=="fccustcontrib5")
fccust=(assets.df[col1:end1])
#fccust contrib predictions----
result3 <- matrix(NA, ncol=length(yearslabel), nrow=length(assetclasslist))
result3=as.data.frame(result3)
names(result3)=yearslabel
#make customer contributions equal to final year of inputs (i.e.y5)
fcyears=(1:length(fccust)) #how many years do we have
result3[assetclasslist, fcyears]=fccust #make first 5 years equal to inputs
result3[,(length(fccust)+1):length(result3)]=fccust[length(fccust)] #make the rest equal to the final year (y5)
fccust.full=result3
#iab SAPN and Energex -----
#take out iab for raw data
col1=which(names(iab.df)=="21")
iabend=as.numeric((names(iab.df[length(iab.df)])))
#cut to size of dataframe
#bring back if statement if dnsp raw data is not available to 2060 (i.e projyearend)
#if(iabend>=projyearend){
end1=which(names(iab.df)==projyearend)
iabcheck=(iab.df[col1:end1])
# } else
#{#make the rest =0
# tmp <- matrix(0, ncol=length(yearslabel), nrow=noassets)
#  tmp=as.data.frame(tmp)
#  names(tmp)=yearslabel
#  iabcheck=tmp
#  col1=which(names(iab.df)=="21")
#  end1=length(iab.df)
#  iabcheck[1:end1]=(iab.df[col1:end1])
#}
#netcapex predictions ----
repratio	= other.df$all.years[other.df$name=="Replacement ratio"]#Replacement ratio
augexratio	 = other.df$all.years[other.df$name=="Augex ratio"]# Augex ratio
syscapratio	= other.df$all.years[other.df$name=="Systcap ratio"]# System capital overhead ratio
modrepcost = other.df$all.years[other.df$name=="Modern rep cost"]# Modern day replacement cost
startincline	= other.df$all.years[other.df$name=="Start incline"]
ratedecline	 = other.df$all.years[other.df$name=="Rate decline"]
decline2040	= other.df$all.years[other.df$name=="Decline after 2040"]# not used by Energex
fcnetavg=fcnetcapex #df of first 5 years in ptrm
#make an empty df for all years and then put in the first 5 years
tmp <- matrix(NA, ncol=length(yearslabel), nrow=noassets)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
blank=tmp
fcnetyears=(1:length(fcnetavg))
tmp[, fcnetyears]=fcnetavg
fcnetavg=tmp
#I. net capex replacement (repex) ----
if (dnsp.in=="Energex"){
ncreplace.df=ncreplaceqld_fun(yearslabel, fcnetavg,noyears,projyearend,noassets, assetcode, repratio,
age, modrepcost,startincline,ratedecline)
}else{
ncreplace.df=ncreplace_fun(yearslabel, fcnetavg,noyears,projyearend,noassets, assetcode, repratio,
age, modrepcost,startincline,ratedecline,decline2040)
}
#II net capex replace or slim
ncskinny.df=ncskinny_fun(noassets,yearslabel, fcnetcapex, ncreplace.df, retireslim)
startncyears=yearslabel[6]
noncyears=6:noyears
ncyearslab=startncyears:projyearend
augexdf=fcnetavg*augexratio
augexdf
length(noassets)
noassets
augexdf
growth.df[8,6]
for(i in 6:length(augexdf)){
for (j in noassets){
augexdf[j,i]=augexdf[j,(i-1)]*(1+growth.df[8,i])
}
}
nc$code=assetcode
augexdf$code=assetcode
assetcode
augexdf
for(i in 6:length(augexdf)){
for (j in noassets){
augexdf[j,i]=augexdf[j,(i-1)]*(1+growth.df[8,i])
}
}
#  startncyears=yearslabel[6]
#  noncyears=6:noyears
# ncyearslab=startncyears:projyearend
augexdf=fcnetavg*augexratio
for(i in 6:length(augexdf)){
for (j in noassets){
augexdf[j,i]=augexdf[j,(i-1)]*(1+growth.df[8,i])
}
}
augexdf
augexdf[1,(6-1)]*(1+growth.df[8,6])
for(i in 6:length(augexdf)){
for (j in 1:noassets){
augexdf[j,i]=augexdf[j,(i-1)]*(1+growth.df[8,i])
}
}
augexdf
#asset code
augexdf$code=assetcode
augexdf
#change all asset code 2 to 0
for (i in 1:(length(augexdf))){
for (j in 1:noassets){
ifelse((augexdf[j,(grep("code", colnames(augexdf)))]==2),(augexdf[j,i]=0),(augexdf[j,i]=augexdf[j,i]))}
}
augexdf
#asset code
augexdf$code=assetcode
augexdf
augexratio
ncaugex_fun <- function(fcnetavg,augexratio,growth.df,noassets,assetcode){
augexdf=fcnetavg*augexratio
#year 6 onwards:
#=I3*(1+'Growth capex model'!H$13)
#growth capex model is an entire new function
#h13 = change final row in growth.df
for(i in 6:length(augexdf)){
for (j in 1:noassets){
augexdf[j,i]=augexdf[j,(i-1)]*(1+growth.df[8,i])
}
}
#asset code
augexdf$code=assetcode
#change all asset code 2 to 0
for (i in 1:(length(augexdf)-1)){
for (j in 1:noassets){
ifelse((augexdf[j,(grep("code", colnames(augexdf)))]==2),(augexdf[j,i]=0),(augexdf[j,i]=augexdf[j,i]))}
}
ncaugex.df=nc
return(ncaugex.df)
}
#III net capex augex
ncaugex.df=ncaugex_fun(fcnetavg,augexratio,growth.df,noassets,assetcode)
ncaugex_fun <- function(fcnetavg,augexratio,growth.df,noassets,assetcode){
augexdf=fcnetavg*augexratio
#year 6 onwards:
#=I3*(1+'Growth capex model'!H$13)
#growth capex model is an entire new function
#h13 = change final row in growth.df
for(i in 6:length(augexdf)){
for (j in 1:noassets){
augexdf[j,i]=augexdf[j,(i-1)]*(1+growth.df[8,i])
}
}
#asset code
augexdf$code=assetcode
#change all asset code 2 to 0
for (i in 1:(length(augexdf)-1)){
for (j in 1:noassets){
ifelse((augexdf[j,(grep("code", colnames(augexdf)))]==2),(augexdf[j,i]=0),(augexdf[j,i]=augexdf[j,i]))}
}
return(augexdf)
}
#III net capex augex
ncaugex.df=ncaugex_fun(fcnetavg,augexratio,growth.df,noassets,assetcode)
ncaugex.df
ncskinny.df
#IV net capex sys cap overhead
ncsyscap.df=ncsyscap_fun(noassets,yearslabel, fcnetavg, syscapratio,assetcode)
ncsyscap.df
#V capex non-network
ncnonnetwk.df=ncnonnetwk_fun(noassets,yearslabel, fcnetcapex, assetcode)
noassets
productivity.in
as.numeric(yearslabel[6])
tmp <- matrix(NA, ncol=length(yearslabel), nrow=noassets)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
nc=tmp
productivity=productivity.in/100
aggend=as.numeric(yearslabel[6])
for(i in 1:5)
nc[assetclass,i]=fcnetcapex[assetclass,i]
for(i in 6:length(nc)){
for (j in 1:noassets){
nc[j,i]= ((ncreplace.df[j,i]-ncskinny.df[j,i]+ncaugex.df[j,i]+ncsyscap.df[j,i]+ncnonnetwk.df[j,i])
*(1-productivity[i])^(yearslabel[i]-aggend))
}
}
nc=tmp
for(i in 1:5){
nc[,i]=fcnetcapex[,i]
}
nc
for(i in 6:length(nc)){
for (j in 1:noassets){
nc[j,i]= ((ncreplace.df[j,i]-ncskinny.df[j,i]+ncaugex.df[j,i]+ncsyscap.df[j,i]+ncnonnetwk.df[j,i])
*(1-productivity[i])^(yearslabel[i]-aggend))
}
}
nc
noassets
length(nc)
ncreplace.df
augexdf
(length(augexdf)-1)
augexdf=augexdf[1:(length(augexdf)-1)]
augexdf
ncreplace.df
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
document()
load_all("c://R/packages/ptrm",T)
#I. net capex replacement (repex) ----
if (dnsp.in=="Energex"){
ncreplace.df=ncreplaceqld_fun(yearslabel, fcnetavg,noyears,projyearend,noassets, assetcode, repratio,
age, modrepcost,startincline,ratedecline)
}else{
ncreplace.df=ncreplace_fun(yearslabel, fcnetavg,noyears,projyearend,noassets, assetcode, repratio,
age, modrepcost,startincline,ratedecline,decline2040)
}
#II net capex replace or slim
ncskinny.df=ncskinny_fun(noassets,yearslabel, fcnetcapex, ncreplace.df, retireslim)
#III net capex augex
ncaugex.df=ncaugex_fun(fcnetavg,augexratio,growth.df,noassets,assetcode)
#IV net capex sys cap overhead
ncsyscap.df=ncsyscap_fun(noassets,yearslabel, fcnetavg, syscapratio,assetcode)
#V capex non-network
ncnonnetwk.df=ncnonnetwk_fun(noassets,yearslabel, fcnetcapex, assetcode)
ncaugex_fun <- function(fcnetavg,augexratio,growth.df,noassets,assetcode){
augexdf=fcnetavg*augexratio
#year 6 onwards:
#=I3*(1+'Growth capex model'!H$13)
#growth capex model is an entire new function
#h13 = change final row in growth.df
for(i in 6:length(augexdf)){
for (j in 1:noassets){
augexdf[j,i]=augexdf[j,(i-1)]*(1+growth.df[8,i])
}
}
#asset code
augexdf$code=assetcode
#change all asset code 2 to 0
for (i in 1:(length(augexdf)-1)){
for (j in 1:noassets){
ifelse((augexdf[j,(grep("code", colnames(augexdf)))]==2),(augexdf[j,i]=0),(augexdf[j,i]=augexdf[j,i]))}
}
augexdf=augexdf[1:(length(augexdf)-1)]
return(augexdf)
}
#III net capex augex
ncaugex.df=ncaugex_fun(fcnetavg,augexratio,growth.df,noassets,assetcode)
tmp <- matrix(NA, ncol=length(yearslabel), nrow=noassets)
tmp=as.data.frame(tmp)
names(tmp)=yearslabel
nc=tmp
productivity=productivity.in/100
aggend=as.numeric(yearslabel[6])
#avg=rowMeans(fcnetcapex)
for(i in 1:5){
nc[,i]=fcnetcapex[,i]
}
for(i in 6:length(nc)){
for (j in 1:noassets){
nc[j,i]= ((ncreplace.df[j,i]-ncskinny.df[j,i]+ncaugex.df[j,i]+ncsyscap.df[j,i]+ncnonnetwk.df[j,i])
*(1-productivity[i])^(yearslabel[i]-aggend))
}
}
nc
productivity
for(i in 6:length(nc)){
for (j in 1:noassets){
nc[j,i]= ((ncreplace.df[j,i]-ncskinny.df[j,i]+ncaugex.df[j,i]+ncsyscap.df[j,i]+ncnonnetwk.df[j,i])
*(1-productivity)^(yearslabel[i]-aggend))
}
}
nc
colSums(nc)
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
document()
check()
#load package from local source
#set working directory to package directory
setwd("c://R/packages/ptrm")
load_all("./",T)
check()
library(devtools)
library(roxygen2)
setwd("C:/R/PTRM")
load_all("c://R/packages/ptrm",T)
library(ptrm)
library(ggplot2)
#dynamic inputs:
#or just manually from excel ----
#inputs----
scenario.in="medium"
dnsp.in="SAPN" #("Energex","SAPN")
projyearend.in = 60
age.in=80
addnew.in=0
retireslim.in=10
productivity.in=1
rba.in=3
cars.in=70
solar.in=50
batt.in=20
cust.in=1.4
ogrid.in=5
use.in=-0.9
signal.in="strong"
demand.in=0.5
setwd("C:/R/shiny/dabase_app")
#load data ----
#no scientific notation
options(scipen=999999)
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
iab.df = read.csv("./data/alliab.csv")
labels=names(iab.df)
labels[1:5]=c("dnsp","dnspname","assetclass","assetname", "type")
labels[6:length(labels)]=as.character(21:83)
names(iab.df)=labels
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
labels=c("hour","dnsp","dsnpname","19", "20","21","solar","battery","ev")
names(pdprof.df)=labels
priceprof.df = read.csv("./data/allpriceprof.csv")
labels=names(priceprof.df)
labels[1]="hour"
names(priceprof.df)=labels
#energy volumes----
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
# peak demand ----
peakdemand.df=allpeakdemand_fun(dnsp.in,other.df,pdprof.df,projyearend.in,energyvol.df,use.in,signal.in)
#growth function
growth.df=allgrowth_fun(dnsp.in,other.df,pdprof.df,projyearend.in,energyvol.df,peakdemand.df,
demand.in,solar.in, batt.in, age.in, cust.in,cars.in)
df.real=ptrm_fun(assets.df,other.df, growth.df ,iab.df,projyearend.in, age.in, retireslim.in,
productivity.in,dnsp.in, rba.in)
#price----
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,priceprof.df,projyearend.in,cust.in,signal.in)
#step 1
#subset revenue.real
rev.df=subset(df.real,df.real$type=="Revenue (real)")
revenue.real=rev.df$cost*1000000
revenue.real=revenue.real[2:length(revenue.real)]
setwd("c://R")
write.csv(revenue.real,"rev.csv")
shiny::runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
demand.in
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
runApp('C:/R/shiny/dabase_app')
library(devtools)
library(roxygen2)
setwd("C:/R/PTRM")
load_all("c://R/packages/ptrm",T)
library(ptrm)
library(ggplot2)
#dynamic inputs:
#or just manually from excel ----
#inputs----
scenario.in="medium"
dnsp.in="SAPN" #("Energex","SAPN")
projyearend.in = 60
age.in=80
addnew.in=0
retireslim.in=10
productivity.in=1
rba.in=3
cars.in=70
solar.in=50
batt.in=20
cust.in=1.4
ogrid.in=5
use.in=-0.9
signal.in="strong"
demand.in=0.5
setwd("C:/R/shiny/dabase_app")
#load data ----
#no scientific notation
options(scipen=999999)
assets.df = read.csv("./data/allassets.csv")
labels=names(assets.df)
labels[1]="dnsp"
names(assets.df)=labels
other.df = read.csv("./data/allother.csv",header=T)
labels=names(other.df)
labels=c("dnsp","dnspname","type","name","description","all.years","0","1","2","3","4","5","6","7","8","9","10","taxinc","taxexp")
names(other.df)=labels
iab.df = read.csv("./data/alliab.csv")
labels=names(iab.df)
labels[1:5]=c("dnsp","dnspname","assetclass","assetname", "type")
labels[6:length(labels)]=as.character(21:83)
names(iab.df)=labels
pdprof.df=read.csv("./data/allpdprofile.csv",header=T)
labels=names(pdprof.df)
labels=c("hour","dnsp","dsnpname","19", "20","21","solar","battery","ev")
names(pdprof.df)=labels
priceprof.df = read.csv("./data/allpriceprof.csv")
labels=names(priceprof.df)
labels[1]="hour"
names(priceprof.df)=labels
#start_time <- Sys.time()
#energy volumes----
energyvol.df=allenergyvol_fun(dnsp.in,other.df,projyearend.in,use.in, cust.in,cars.in,ogrid.in,solar.in,batt.in)
# peak demand ----
peakdemand.df=allpeakdemand_fun(dnsp.in,other.df,pdprof.df,projyearend.in,energyvol.df,use.in,signal.in)
#growth function
growth.df=allgrowth_fun(dnsp.in,other.df,pdprof.df,projyearend.in,energyvol.df,peakdemand.df,
demand.in,solar.in, batt.in, age.in, cust.in,cars.in)
#ptrm ----
#call ptrm function from package #this one automatically cuts for dnsp
df.real=ptrm_fun(assets.df,other.df, growth.df ,iab.df,projyearend.in, age.in, retireslim.in,
productivity.in,dnsp.in, rba.in)
#price----
#call price function
price.df=price_fun(dnsp.in,df.real,energyvol.df,other.df,priceprof.df,projyearend.in,cust.in,signal.in)
#years 2021, 2040, 2060
demand=peakdemand.df$`21`
Years=rep('2021',length(demand))
hours=1:24
df=cbind.data.frame(hours,demand,Years)
demand=peakdemand.df$`40`
Years=rep('2040',length(demand))
df1=cbind.data.frame(hours,demand,Years)
demand=peakdemand.df$`60`
Years=rep('2060',length(demand))
df2=cbind.data.frame(hours,demand,Years)
demand.df=rbind.data.frame(df,df1,df2)
max=max(demand.df$demand)
max
ggplot(demand.df,aes(x=hours,y=demand,group=Years)) +
geom_line(size=1,aes(color = Years))+
theme_classic(base_size=12)+
theme(axis.text.x=element_text(size=12),legend.text=element_text(size=12),
axis.text.y=element_text(size=12))+
guides(fill = guide_legend(guide_legend(ncol = 1)))+
ggtitle("Peak Demand Profile")+
ylab("MWh")+xlab("Hour of the day")+ scale_y_continuous(expand = c(0, 0),lim=c(0,9000))+
scale_x_continuous(expand = c(0, 0),lim=c(0,24))+
scale_colour_manual(values=c("#fc8d59", "#5ab4ac", "#003c30"))#+
geom_text(x=demand.df$hours[demand.df$demand==max], y=max+10,label=round(max,digits=1),size=5)
#geom_text(x=1, y=(udata$price[udata$yearlabel=="2021"])+2,
#         label=round(udata$price[udata$yearlabel=="2021"],digits=1),size=5)
demand.df$hours[demand.df$demand==max]
max+10
ggplot(demand.df,aes(x=hours,y=demand,group=Years)) +
geom_line(size=1,aes(color = Years))+
theme_classic(base_size=12)+
theme(axis.text.x=element_text(size=12),legend.text=element_text(size=12),
axis.text.y=element_text(size=12))+
guides(fill = guide_legend(guide_legend(ncol = 1)))+
ggtitle("Peak Demand Profile")+
ylab("MWh")+xlab("Hour of the day")+ scale_y_continuous(expand = c(0, 0),lim=c(0,9000))+
scale_x_continuous(expand = c(0, 0),lim=c(0,24))+
scale_colour_manual(values=c("#fc8d59", "#5ab4ac", "#003c30"))+
geom_text(x=demand.df$hours[demand.df$demand==max], y=max+10,label=round(max,digits=1),size=5)
runApp()
